<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ES</name>
    </assembly>
    <members>
        <member name="T:ES.Common.Log.Log">
            <summary>
            日志类
            <para>调用此日志类可以应对高速写入日志需求</para>
            <para>日志周期性写入目标文件路径</para>
            <para>配置请参考 LogConfig.cs 类</para>
            </summary>
        </member>
        <member name="M:ES.Common.Log.Log.Info(System.String,System.String,System.String,System.String)">
            <summary>
            信息性 日志
            </summary>
            <param name="log">日志数据</param>
            <param name="className">类型</param>
            <param name="methodName">方法</param>
            <param name="spaceName">空间命名</param>
        </member>
        <member name="M:ES.Common.Log.Log.Debug(System.String,System.String,System.String,System.String)">
            <summary>
            调试性 日志
            </summary>
            <param name="log">日志数据</param>
            <param name="className">类型</param>
            <param name="methodName">方法</param>
            <param name="spaceName">空间命名</param>
        </member>
        <member name="M:ES.Common.Log.Log.Warn(System.String,System.String,System.String,System.String)">
            <summary>
            警告性 日志
            </summary>
            <param name="log">日志数据</param>
            <param name="className">类型</param>
            <param name="methodName">方法</param>
            <param name="spaceName">空间命名</param>
        </member>
        <member name="M:ES.Common.Log.Log.Error(System.String,System.String,System.String,System.String)">
            <summary>
            错误性 日志
            </summary>
            <param name="log">日志数据</param>
            <param name="className">类型</param>
            <param name="methodName">方法</param>
            <param name="spaceName">空间命名</param>
        </member>
        <member name="M:ES.Common.Log.Log.Exception(System.Exception,System.String,System.String,System.String,System.String)">
            <summary>
            异常 日志
            </summary>
            <param name="ex">异常对象</param>
            <param name="log">日志内容</param>
            <param name="className">类型</param>
            <param name="methodName">方法</param>
            <param name="spaceName">空间命名</param>
        </member>
        <member name="M:ES.Common.Log.Log.WriteLine(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            写入日志
            </summary>
            <param name="type">日志类型</param>
            <param name="log">日志数据</param>
            <param name="className">类型</param>
            <param name="methodName">方法</param>
            <param name="spaceName">空间命名</param>
        </member>
        <member name="T:ES.Common.Log.LogConfig">
            <summary>
            日志配置器
            <para>配置修改建议在第一次调用Log前修改完成，避免出现奇怪的问题</para>
            </summary>
        </member>
        <member name="F:ES.Common.Log.LogConfig.LOG_CONSOLE_OUTPUT">
            <summary>
            日志控制台输出开关 默认关闭
            </summary>
        </member>
        <member name="F:ES.Common.Log.LogConfig.LOG_PERIOD">
            <summary>
            日志写入周期 单位 ms
            </summary>
        </member>
        <member name="F:ES.Common.Log.LogConfig.LOG_FILE_SUFFIX">
            <summary>
            日志写入文件后缀
            </summary>
        </member>
        <member name="F:ES.Common.Log.LogConfig.LOG_UNIT_FILE_MAX_SIZE">
            <summary>
            日志单个文件最多大小
            单位 byte 默认 50MB大小
            </summary>
        </member>
        <member name="F:ES.Common.Log.LogConfig.LOG_PATH">
            <summary>
            日志根路径
            </summary>
        </member>
        <member name="T:ES.Common.Log.LogInfo">
            <summary>
            日志信息数据
            </summary>
        </member>
        <member name="P:ES.Common.Log.LogInfo.type">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="P:ES.Common.Log.LogInfo.time">
            <summary>
            日志时间
            </summary>
        </member>
        <member name="P:ES.Common.Log.LogInfo.spaceName">
            <summary>
            日志捕捉空间命名
            </summary>
        </member>
        <member name="P:ES.Common.Log.LogInfo.className">
            <summary>
            日志发生对象类名
            </summary>
        </member>
        <member name="P:ES.Common.Log.LogInfo.methodName">
            <summary>
            日志发生函数
            </summary>
        </member>
        <member name="P:ES.Common.Log.LogInfo.data">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="T:ES.Common.Log.LogManager">
            <summary>
            日志管理器
            <para>周期性写入文件</para>
            <para>周期LOG_PERIOD、写入路径LOG_PATH和分文件大小限制LOG_UNIT_FILE_MAX_SIZE可以直接调用静态修改（程序启动时未第一次调用就应修改完成）</para>
            </summary>
        </member>
        <member name="F:ES.Common.Log.LogManager.instance">
            <summary>
            单例静态对象
            </summary>
        </member>
        <member name="P:ES.Common.Log.LogManager.Instance">
            <summary>
            获取单例
            </summary>
        </member>
        <member name="F:ES.Common.Log.LogManager.logInfos">
            <summary>
            日志数据队列
            </summary>
        </member>
        <member name="F:ES.Common.Log.LogManager.fileInfo">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="F:ES.Common.Log.LogManager.logId">
            <summary>
            日志ID
            </summary>
        </member>
        <member name="F:ES.Common.Log.LogManager.logIndex">
            <summary>
            日志索引，如果单个时间内日志太大则分开
            </summary>
        </member>
        <member name="F:ES.Common.Log.LogManager.proccessName">
            <summary>
            进程名称
            </summary>
        </member>
        <member name="M:ES.Common.Log.LogManager.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ES.Common.Log.LogManager.Update(System.Int32)">
            <summary>
            系统调用
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:ES.Common.Log.LogManager.UpdateEnd">
            <summary>
            停止更新
            </summary>
        </member>
        <member name="T:ES.Common.Time.BaseTimeFlow">
            <summary>
            时间流基类
            <para>封装了时间流必要的函数 正常使用 TimeFlow 即可</para>
            <para>框架内部调用类</para>
            </summary>
        </member>
        <member name="F:ES.Common.Time.BaseTimeFlow.isTimeFlowPause">
            <summary>
            时间流暂停开关
            </summary>
        </member>
        <member name="F:ES.Common.Time.BaseTimeFlow.isTimeFlowStop">
            <summary>
            时间流停止开关
            </summary>
        </member>
        <member name="M:ES.Common.Time.BaseTimeFlow.#ctor(ES.Common.Time.ITimeUpdate)">
            <summary>
            构造函数 多线程处理逻辑
            <para>继承此类的对象会分配在多个线程下运行，需要单线程请使用SyncTimeFlow类</para>
            </summary>
        </member>
        <member name="M:ES.Common.Time.BaseTimeFlow.#ctor(ES.Common.Time.ITimeUpdate,System.Int32)">
            <summary>
            构造函数 内部使用
            </summary>
            <param name="timeUpdate"></param>
            <param name="tfIndex">数组前两个线程是给框架使用，0负责数据部分 1负责文件部分</param>
        </member>
        <member name="M:ES.Common.Time.BaseTimeFlow.CreateTimeFlow(ES.Common.Time.ITimeUpdate,System.Int32)">
            <summary>
            创建基础时间流
            </summary>
            <param name="timeUpdate"></param>
            <param name="tfIndex">数组前两个线程是给框架使用，0负责数据部分 1负责文件部分</param>
        </member>
        <member name="M:ES.Common.Time.BaseTimeFlow.IsTimeUpdateActive">
            <summary>
            索引是否还在
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Common.Time.BaseTimeFlow.StartTimeFlowES">
            <summary>
            开始时间流
            </summary>
        </member>
        <member name="M:ES.Common.Time.BaseTimeFlow.SetTimeFlowPauseES(System.Boolean)">
            <summary>
            设置时间流暂停
            </summary>
            <param name="pause">暂停开关 true暂停时间流 false恢复时间流</param>
        </member>
        <member name="M:ES.Common.Time.BaseTimeFlow.CloseTimeFlowES">
            <summary>
            关闭时间流
            <para>关闭后无法在此对象唤醒</para>
            </summary>
        </member>
        <member name="M:ES.Common.Time.BaseTimeFlow.CloseAllTimeFlowES">
            <summary>
            关闭程序中所有时间流
            <para>调用此函数，在此次进程中无法再次启动</para>
            </summary>
        </member>
        <member name="M:ES.Common.Time.BaseTimeFlow.UpdateES(System.Int32)">
            <summary>
            内部 更新
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:ES.Common.Time.BaseTimeFlow.UpdateEndES">
            <summary>
            内部 停止更新
            </summary>
        </member>
        <member name="T:ES.Common.Time.ITimeUpdate">
            <summary>
            时间流 更新接口
            <para>[多线程处理逻辑] Update以10ms周期循环</para>
            <para>继承此类可以实现Update实时更新功能</para>
            <para>为了方便类的部分初始和性能节省需手动调用 StartTimeFlow(); 函数</para>
            <para>每次Update是先执行函数体内容再睡眠等待，所以如果需要精确的时间间隔应当先判定时间再累加时间</para>
            <para>继承此类的对象会分配在多个线程下运行，需要单线程请使用SyncTimeFlow类</para>
            </summary>
        </member>
        <member name="M:ES.Common.Time.ITimeUpdate.Update(System.Int32)">
            <summary>
            更新 Update以10ms周期循环 
            <para>可以通过此timeFlowPeriod对象直接获取</para>
            <para>每次Update是先执行函数体内容再睡眠等待，所以如果需要精确的时间间隔应当先判定时间再累加时间</para>
            </summary>
            <param name="deltaTime">程序函数实际执行时间间隔 精度：ms</param>
        </member>
        <member name="M:ES.Common.Time.ITimeUpdate.UpdateEnd">
            <summary>
            停止更新
            <para>关闭时间流触发此函数</para>
            </summary>
        </member>
        <member name="T:ES.Common.Time.TimeCaller">
            <summary>
            时间执行器
            <para>此执行器多线程分配</para>
            <para>需要统一线程调度请使用SyncTimeCaller</para>
            </summary>
        </member>
        <member name="T:ES.Common.Time.TimeCaller.MethodHandle">
            <summary>
            回调执行的函数
            </summary>
            <param name="count">执行次数</param>
        </member>
        <member name="F:ES.Common.Time.TimeCaller.delayTime">
            <summary>
            延迟时间
            </summary>
        </member>
        <member name="F:ES.Common.Time.TimeCaller.periodTime">
            <summary>
            周期时间
            </summary>
        </member>
        <member name="F:ES.Common.Time.TimeCaller.isRepeat">
            <summary>
            是否重复
            </summary>
        </member>
        <member name="F:ES.Common.Time.TimeCaller.repeatNum">
            <summary>
            重复次数
            </summary>
        </member>
        <member name="M:ES.Common.Time.TimeCaller.#ctor(System.Int32,System.Int32,System.Boolean,System.Int64,ES.Common.Time.TimeCaller.MethodHandle,System.Int32)">
            <summary>
            创建一个时间执行器
            </summary>
            <param name="delayTime">第一次开始延迟时间，单位ms</param>
            <param name="periodTime">每次周期时间【第二次之后开始执行的延迟时间】，单位ms</param>
            <param name="isRepeat">是否重复状态，不重复状态下周期时间无效, 默认不重复</param>
            <param name="repeatNum">重复次数，值为 -1时 无限循环，默认 -1</param>
            <param name="handle">需要被执行的函数</param>
            <param name="tfIndex">时间流索引</param>
        </member>
        <member name="M:ES.Common.Time.TimeCaller.Create(System.Int32,System.Int32,System.Boolean,System.Int64,ES.Common.Time.TimeCaller.MethodHandle)">
            <summary>
            创建一个时间执行器
            </summary>
            <param name="delayTime">第一次开始延迟时间，单位ms</param>
            <param name="periodTime">每次周期时间【第二次之后开始执行的延迟时间】，单位ms</param>
            <param name="isRepeat">是否重复状态，不重复状态下周期时间无效, 默认不重复</param>
            <param name="repeatNum">重复次数，值为 -1时 无限循环，默认 -1</param>
            <param name="handle">需要被执行的函数</param>
        </member>
        <member name="M:ES.Common.Time.TimeCaller.CreateSync(System.Int32,System.Int32,System.Boolean,System.Int64,ES.Common.Time.TimeCaller.MethodHandle)">
            <summary>
            创建一个同步时间执行器
            </summary>
            <param name="delayTime">第一次开始延迟时间，单位ms</param>
            <param name="periodTime">每次周期时间【第二次之后开始执行的延迟时间】，单位ms</param>
            <param name="isRepeat">是否重复状态，不重复状态下周期时间无效, 默认不重复</param>
            <param name="repeatNum">重复次数，值为 -1时 无限循环，默认 -1</param>
            <param name="handle">需要被执行的函数</param>
        </member>
        <member name="M:ES.Common.Time.TimeCaller.CallMethod(ES.Common.Time.TimeCaller.MethodHandle)">
            <summary>
            需要被调用的函数
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:ES.Common.Time.TimeCaller.CancelTimeCall">
            <summary>
            取消时间执行器任务
            </summary>
        </member>
        <member name="M:ES.Common.Time.TimeCaller.Update(System.Int32)">
            <summary>
            系统调用
            </summary>
            <param name="deltaTime"></param>
        </member>
        <member name="M:ES.Common.Time.TimeCaller.UpdateEnd">
            <summary>
            停止更新
            </summary>
        </member>
        <member name="T:ES.Common.Time.TimeFix">
            <summary>
            时间修补助手
            <para>用于线程循环中执行时间不对等产生问题</para>
            </summary>
        </member>
        <member name="F:ES.Common.Time.TimeFix.sw">
            <summary>
            监视器
            </summary>
        </member>
        <member name="F:ES.Common.Time.TimeFix.period">
            <summary>
            循环执行理想周期
            </summary>
        </member>
        <member name="F:ES.Common.Time.TimeFix.current_period">
            <summary>
            当前执行周期
            </summary>
        </member>
        <member name="F:ES.Common.Time.TimeFix.fix_time">
            <summary>
            需要修复的时间差
            </summary>
        </member>
        <member name="M:ES.Common.Time.TimeFix.#ctor(System.Int32)">
            <summary>
            创建一个时间修补助手
            </summary>
            <param name="period">循环周期，精度：ms</param>
        </member>
        <member name="M:ES.Common.Time.TimeFix.GetPeriod">
            <summary>
            获取理想设置周期
            </summary>
            <returns>理想周期，精度：ms</returns>
        </member>
        <member name="M:ES.Common.Time.TimeFix.Begin">
            <summary>
            需要执行消耗开始的地方
            </summary>
        </member>
        <member name="M:ES.Common.Time.TimeFix.End">
            <summary>
            需要执行消耗结束的地方
            <para>此结果为下一次周期执行等待的时间，如需计算补差值，可以拿理想周期减去实际周期即可</para>
            </summary>
            <returns>下一次执行的周期时间</returns>
        </member>
        <member name="T:ES.Common.Time.TimeFlow">
            <summary>
            时间流 
            <para>[多线程处理逻辑] Update以10ms周期循环</para>
            <para>继承此类可以实现Update实时更新功能</para>
            <para>为了方便类的部分初始和性能节省需手动调用 Start(); 函数</para>
            <para>每次Update是先执行函数体内容再睡眠等待，所以如果需要精确的时间间隔应当先判定时间再累加时间</para>
            </summary>
        </member>
        <member name="F:ES.Common.Time.TimeFlow.period">
            <summary>
            获取时间流固定周期
            <para>刷新固定时间：10ms</para>
            </summary>
        </member>
        <member name="P:ES.Common.Time.TimeFlow.isPause">
            <summary>
            时间流暂停开关 
            <para>只读 通过 Pause 函数修改</para>
            </summary>
        </member>
        <member name="P:ES.Common.Time.TimeFlow.isStop">
            <summary>
            时间流停止开关
            <para>只读 通过 Close/CloseAll 函数修改</para>
            </summary>
        </member>
        <member name="M:ES.Common.Time.TimeFlow.#ctor(ES.Common.Time.ITimeUpdate)">
            <summary>
            构造函数 多线程处理逻辑
            </summary>
        </member>
        <member name="M:ES.Common.Time.TimeFlow.#ctor(ES.Common.Time.ITimeUpdate,System.Int32)">
            <summary>
            构造函数 内部使用
            </summary>
            <param name="timeUpdate"></param>
            <param name="tfIndex">数组前两个线程是给框架使用，0负责数据部分 1负责文件部分</param>
        </member>
        <member name="M:ES.Common.Time.TimeFlow.Create(ES.Common.Time.ITimeUpdate)">
            <summary>
            创建一个时间流
            </summary>
            <param name="timeUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Common.Time.TimeFlow.CreateSync(ES.Common.Time.ITimeUpdate)">
            <summary>
            创建一个同步时间流
            </summary>
            <param name="timeUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Common.Time.TimeFlow.Start">
            <summary>
            开始时间流
            </summary>
        </member>
        <member name="M:ES.Common.Time.TimeFlow.Pause">
            <summary>
            时间流暂停
            </summary>
        </member>
        <member name="M:ES.Common.Time.TimeFlow.Close">
            <summary>
            关闭时间流
            <para>关闭后无法在此对象唤醒</para>
            <para>如果可能尽可能在不再使用时调用此函数</para>
            </summary>
        </member>
        <member name="M:ES.Common.Time.TimeFlow.CloseAll">
            <summary>
            关闭程序中所有时间流
            <para>调用此函数，在此次进程中无法再次启动</para>
            </summary>
        </member>
        <member name="T:ES.Common.Time.TimeFlowManager">
            <summary>
            时间流 管理器
            </summary>
        </member>
        <member name="F:ES.Common.Time.TimeFlowManager.instance">
            <summary>
            静态单例
            </summary>
        </member>
        <member name="P:ES.Common.Time.TimeFlowManager.Instance">
            <summary>
            获取单例对象
            </summary>
        </member>
        <member name="F:ES.Common.Time.TimeFlowManager.timeFlowPeriod">
            <summary>
            固定刷新周期
            <para>刷新固定时间：10ms</para>
            </summary>
        </member>
        <member name="F:ES.Common.Time.TimeFlowManager.timeFlowThreads">
            <summary>
            时间流控制线程 核心线程
            </summary>
        </member>
        <member name="F:ES.Common.Time.TimeFlowManager.timeFlowThreadMoniter">
            <summary>
            监控线程
            </summary>
        </member>
        <member name="M:ES.Common.Time.TimeFlowManager.#ctor">
            <summary>
            私有构造
            </summary>
        </member>
        <member name="M:ES.Common.Time.TimeFlowManager.PushTimeFlow(ES.Common.Time.BaseTimeFlow,System.Int32)">
            <summary>
            压入一个时间流继承对象
            </summary>
            <param name="tf"></param>
            <param name="tfIndex">数组前两个线程是给框架使用，0负责数据部分 1负责文件部分 2 单线程同步update</param>
        </member>
        <member name="M:ES.Common.Time.TimeFlowManager.UpdateCheckTimeFlowThread">
            <summary>
            更新检查阻塞线程并重启
            <para>检测周期为线程睡眠 1 秒</para>
            </summary>
        </member>
        <member name="M:ES.Common.Time.TimeFlowManager.Destroy">
            <summary>
            销毁所有更新
            <para>本次程序运行结束前都无法使用。建议只有在即将关闭前调用</para>
            </summary>
        </member>
        <member name="P:ES.Common.Time.TimeFlowThread.IsRunning">
            <summary>
            正在更新状态值
            </summary>
        </member>
        <member name="P:ES.Common.Time.TimeFlowThread.IsPausePushTask">
            <summary>
            是否停止推送任务
            </summary>
        </member>
        <member name="F:ES.Common.Time.TimeFlowThread.threadBlockTimeOutCount">
            <summary>
            线程阻塞超时计数
            </summary>
        </member>
        <member name="M:ES.Common.Time.TimeFlowThread.UpdateHandle">
            <summary>
            更新句柄
            这个地方要优化，在原基础线程优化方案上改成自动增长的模式，检测线程里工作线数量与处理时长的比例是否对称和目标延迟是否对等，否则增加新的线程并且移动到新线程中
            以及线程超时优化
            </summary>
        </member>
        <member name="T:ES.Common.Utils.AppConfig">
            <summary>
            应用配置文件读取
            <para>默认读取项目同级目录下 [应用名].config 或 [应用名].dll.config 的XML文件(dll同样调用启动程序配置)</para>
            <para>配置文件 可以直接通过VS新建项 配置文件类型.config 生成</para>
            <para>最简单的方式通过VS添加新建项选择 应用程序配置文件 后直接确定 即可生成名为 App.config 的文件 就可以了</para>
            <para>仅支持一级层级和二级层级</para>
            <para>具体格式：&lt;?xml version="1.0" encoding="utf-8" ?&gt;&lt;configuration&gt;&lt;Hello&gt;Hello World&lt;/Hello&gt;&lt;RootTest&gt;&lt;Hello&gt;Hello World2&lt;/Hello&gt;&lt;/RootTest&gt;&lt;/configuration&gt;</para>
            </summary>
        </member>
        <member name="F:ES.Common.Utils.AppConfig.doc">
            <summary>
            读取对象
            </summary>
        </member>
        <member name="M:ES.Common.Utils.AppConfig.Reload">
            <summary>
            从文件中重新读取最新的配置
            </summary>
        </member>
        <member name="M:ES.Common.Utils.AppConfig.Read(System.String)">
            <summary>
            读取参数
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Common.Utils.AppConfig.Read(System.String,System.String)">
            <summary>
            读取参数 可以往下读一级
            </summary>
            <param name="group"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ES.Common.Utils.ByteHelper">
            <summary>
            字节助手
            </summary>
        </member>
        <member name="M:ES.Common.Utils.ByteHelper.GetValidLength(System.Byte[])">
            <summary>
            获取byte的实际长度
            <para>数组中有连续9个字节连续为0的情况</para>
            <para>原理 默认基础类型字节占用情况最大为8个</para>
            </summary>
            <param name="bytes">数据</param>
            <returns></returns>
        </member>
        <member name="M:ES.Common.Utils.ByteHelper.GetValidByte(System.Byte[],System.Int32)">
            <summary>
            获取byte的实际数据
            <para>数组中有连续9个字节连续为0的情况</para>
            <para>原理 默认基础类型字节占用情况最大为8个</para>
            </summary>
            <param name="bytes">数据</param>
            <param name="retainNum">往有效数据后保留几位，默认为 0 不保留</param>
            <returns>实际长度的byte[]</returns>
        </member>
        <member name="T:ES.Common.Utils.ExtendClass">
            <summary>
            拓展方法类
            <para>此类用于拓展一些对象上的方法</para>
            <para>便于更快捷的开发</para>
            </summary>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.AsJObject(System.Byte[])">
            <summary>
            通过json字节流新建Json对象
            <para>此字节流编码：UTF-8</para>
            </summary>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.AsJObject(System.String)">
            <summary>
            通过json字符串新建Json对象
            </summary>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.AsString(Newtonsoft.Json.Linq.JObject)">
            <summary>
            序列化json对象为字符串
            </summary>
            <returns>序列化的字符串</returns>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.AsBytes(Newtonsoft.Json.Linq.JObject)">
            <summary>
            序列化json对象为字节流
            <para>此字节流编码：UTF-8</para>
            </summary>
            <returns>序列化的字节流</returns>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.AsJArray(System.Byte[])">
            <summary>
            通过json字节流新建Json数组对象
            <para>此字节流编码：UTF-8</para>
            </summary>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.AsJArray(System.String)">
            <summary>
            通过json字符串新建Json数组对象
            </summary>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.AsString(Newtonsoft.Json.Linq.JArray)">
            <summary>
            序列化json数组对象为字符串
            </summary>
            <returns>序列化的字符串</returns>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.AsBytes(Newtonsoft.Json.Linq.JArray)">
            <summary>
            序列化json数组对象为字节流
            <para>此字节流编码：UTF-8</para>
            </summary>
            <returns>序列化的字节流</returns>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.ToBase64(System.String)">
            <summary>
            将正常字符串转化为base64编码字符串
            </summary>
            <param name="str">需要转化的正常字符串</param>
            <returns></returns>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.FromBase64(System.String)">
            <summary>
            将base64编码字符串转化为正常字符串
            </summary>
            <param name="str">需要转化的base64字符串</param>
            <returns></returns>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.ToMilliSecondTicks(System.DateTime)">
            <summary>
            转换为毫秒单位时间戳
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.ToSecondTicks(System.DateTime)">
            <summary>
            转换为秒单位时间戳
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.CompareYear(System.DateTime,System.DateTime)">
            <summary>
            对比[年]范围的数据
            <para>[等于 0 两个日期相等]</para>
            <para>[大于 0 当前日期大于对比日期]</para>
            <para>[小于 0 当前日期小于对比日期]</para>
            <para>对比值单位秒</para>
            </summary>
            <param name="dateTime"></param>
            <param name="compareDatetime"></param>
            <returns>对比值单位秒</returns>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.CompareMonth(System.DateTime,System.DateTime)">
            <summary>
            对比[年月]范围的数据
            <para>[等于 0 两个日期相等]</para>
            <para>[大于 0 当前日期大于对比日期]</para>
            <para>[小于 0 当前日期小于对比日期]</para>
            <para>对比值单位秒</para>
            </summary>
            <param name="dateTime"></param>
            <param name="compareDatetime"></param>
            <returns>对比值单位秒</returns>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.CompareDay(System.DateTime,System.DateTime)">
            <summary>
            对比[年月日]范围的数据
            <para>[等于 0 两个日期相等]</para>
            <para>[大于 0 当前日期大于对比日期]</para>
            <para>[小于 0 当前日期小于对比日期]</para>
            <para>对比值单位秒</para>
            </summary>
            <param name="dateTime"></param>
            <param name="compareDatetime"></param>
            <returns>对比值单位秒</returns>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.CompareHour(System.DateTime,System.DateTime)">
            <summary>
            对比[年月日时]范围的数据
            <para>[等于 0 两个日期相等]</para>
            <para>[大于 0 当前日期大于对比日期]</para>
            <para>[小于 0 当前日期小于对比日期]</para>
            <para>对比值单位秒</para>
            </summary>
            <param name="dateTime"></param>
            <param name="compareDatetime"></param>
            <returns>对比值单位秒</returns>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.CompareMinute(System.DateTime,System.DateTime)">
            <summary>
            对比[年月日时分]范围的数据
            <para>[等于 0 两个日期相等]</para>
            <para>[大于 0 当前日期大于对比日期]</para>
            <para>[小于 0 当前日期小于对比日期]</para>
            <para>对比值单位秒</para>
            </summary>
            <param name="dateTime"></param>
            <param name="compareDatetime"></param>
            <returns>对比值单位秒</returns>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.CompareSecond(System.DateTime,System.DateTime)">
            <summary>
            对比[年月日时分秒]范围的数据
            <para>[等于 0 两个日期相等]</para>
            <para>[大于 0 当前日期大于对比日期]</para>
            <para>[小于 0 当前日期小于对比日期]</para>
            <para>对比值单位秒</para>
            </summary>
            <param name="dateTime"></param>
            <param name="compareDatetime"></param>
            <returns>对比值单位秒</returns>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.ClearAll``1(System.Collections.Concurrent.ConcurrentQueue{``0})">
            <summary>
            清空 拓展方法提供
            </summary>
            <param name="concurrentQueue"></param>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.ClearAll``1(System.Collections.Concurrent.ConcurrentStack{``0})">
            <summary>
            清空 拓展方法提供
            </summary>
            <param name="concurrentStack"></param>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.ClearAll``1(System.Collections.Concurrent.ConcurrentBag{``0})">
            <summary>
            清空 拓展方法提供
            </summary>
            <param name="concurrentBag"></param>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.Compare(System.Byte[],System.Byte[])">
            <summary>
            比较字节数组
            </summary>
            <param name="b1">字节数组1</param>
            <param name="b2">字节数组2</param>
            <returns>相同返回true 不同返回false</returns>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.AsBytes(System.String)">
            <summary>
            转为UTF-8编码的字节数组
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:ES.Common.Utils.ExtendClass.AsString(System.Byte[])">
            <summary>
            转为UTF-8编码的字符串
            </summary>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="T:ES.Common.Utils.MD5">
            <summary>
            md5工具
            </summary>
        </member>
        <member name="M:ES.Common.Utils.MD5.Encrypt(System.String)">
            <summary>
            加密（32位小写）
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:ES.Common.Utils.MD5.Encrypt(System.Byte[])">
            <summary>
            加密（32位小写）
            </summary>
            <param name="data">字节数据</param>
            <returns></returns>
        </member>
        <member name="T:ES.Common.Utils.RandomCode">
            <summary>
            随机码
            <para>用于生成指定长度的符号代码</para>
            </summary>
        </member>
        <member name="T:ES.Common.Utils.RandomCode.RandomCodeType">
            <summary>
            随机字母类型
            </summary>
        </member>
        <member name="F:ES.Common.Utils.RandomCode.RandomCodeType.HighLowLetterAndNumberAndSymbol">
            <summary>
            大小写字母和数字和符号
            </summary>
        </member>
        <member name="F:ES.Common.Utils.RandomCode.RandomCodeType.HighLowLetterAndNumber">
            <summary>
            大小写字母和数字
            </summary>
        </member>
        <member name="F:ES.Common.Utils.RandomCode.RandomCodeType.HighLetterAndNumber">
            <summary>
            大写字母和数字
            </summary>
        </member>
        <member name="F:ES.Common.Utils.RandomCode.RandomCodeType.HighLetter">
            <summary>
            大写字母
            </summary>
        </member>
        <member name="F:ES.Common.Utils.RandomCode.RandomCodeType.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:ES.Common.Utils.RandomCode.charHighLowLetterAndNumberAndSymbol">
            <summary>
            符号库 大写小写字母数字特殊符号
            </summary>
        </member>
        <member name="F:ES.Common.Utils.RandomCode.charHighLowLetterAndNumber">
            <summary>
            符号库 大写小写字母数字
            </summary>
        </member>
        <member name="F:ES.Common.Utils.RandomCode.charHighLetterAndNumber">
            <summary>
            符号库 大写字母数字
            </summary>
        </member>
        <member name="F:ES.Common.Utils.RandomCode.charHighLetter">
            <summary>
            符号库 大写字母
            </summary>
        </member>
        <member name="F:ES.Common.Utils.RandomCode.charNumber">
            <summary>
            符号库 数字
            </summary>
        </member>
        <member name="F:ES.Common.Utils.RandomCode.random">
            <summary>
            随机器
            </summary>
        </member>
        <member name="M:ES.Common.Utils.RandomCode.Generate(System.Int32,ES.Common.Utils.RandomCode.RandomCodeType,System.Nullable{System.Int32})">
            <summary>
            生成大小写字母和数字组合的字符串
            <para>默认随机为大小写和数字</para>
            </summary>
            <param name="len">生成长度</param>
            <param name="type">随机代码类型</param>
            <param name="seed">随机种子</param>
            <returns>生成的字符串</returns>
        </member>
        <member name="M:ES.Common.Utils.RandomCode.GenerateGuid(System.Boolean)">
            <summary>
            生成唯一Guid
            <para>默认无横线 格式为32个字符</para>
            </summary>
            <param name="hasLine">是否需要分段横线 默认无横线</param>
            <returns></returns>
        </member>
        <member name="T:ES.Common.Utils.Version">
            <summary>
            框架版本信息
            </summary>
        </member>
        <member name="M:ES.Common.Utils.Version.ToString">
            <summary>
            获取版本字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:ES.Data.Buffer.EasyBuffer`1">
            <summary>
            简单数据通信流
            <para>只需要简单继承此类 即可达到类似protobuff的简单效果</para>
            <para>注意此类适合交互即时性要求不高的操作，如果延时性要求很高谨慎使用</para>
            </summary>
        </member>
        <member name="M:ES.Data.Buffer.EasyBuffer`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ES.Data.Buffer.EasyBuffer`1.ToBytes(System.Boolean)">
            <summary>
            获取对象字节流 UTF-8编码
            </summary>
            <param name="isCompress">是否要对对象进行压缩 默认true</param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Buffer.EasyBuffer`1.Parse(System.Byte[],System.Boolean)">
            <summary>
            解析对象 UTF-8 编码
            </summary>
            <param name="buffer">解析字节流</param>
            <param name="isCompress">是否压缩流 默认true</param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Buffer.EasyBuffer`1.ToString(System.Boolean)">
            <summary>
            获取对象字符串
            </summary>
            <param name="isCompress">是否要对对象进行压缩 默认true</param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Buffer.EasyBuffer`1.Parse(System.String,System.Boolean)">
            <summary>
            解析对象
            </summary>
            <param name="buffer">解析字符串</param>
            <param name="isCompress">是否压缩流 默认true</param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Buffer.EasyBuffer`1.CompressJson(System.Text.StringBuilder)">
            <summary>
            压缩
            </summary>
            <param name="optimizedStr"></param>
        </member>
        <member name="M:ES.Data.Buffer.EasyBuffer`1.DeCompressJson(System.Text.StringBuilder)">
            <summary>
            解压缩
            </summary>
            <param name="optimizedStr"></param>
        </member>
        <member name="T:ES.Data.Buffer.EasyBuffer">
            <summary>
            简单数据通信流 基础类
            <para>实际使用中请使用 EasyBuffer`1 (T) 带模板类</para>
            </summary>
        </member>
        <member name="F:ES.Data.Buffer.EasyBuffer._esfields">
            <summary>
            反射字段
            </summary>
        </member>
        <member name="M:ES.Data.Buffer.EasyBuffer.#ctor(System.Reflection.FieldInfo[])">
            <summary>
            构造函数
            </summary>
            <param name="_esfields"></param>
        </member>
        <member name="M:ES.Data.Buffer.EasyBuffer.CompressESBuffer(Newtonsoft.Json.Linq.JObject)">
            <summary>
            压缩
            </summary>
            <param name="jRaw"></param>
        </member>
        <member name="M:ES.Data.Buffer.EasyBuffer.DeCompressESBuffer(Newtonsoft.Json.Linq.JArray)">
            <summary>
            解析
            </summary>
            <param name="jCompress"></param>
        </member>
        <member name="T:ES.Data.Database.Redis.RedisEventListener">
            <summary>
            redis 事件监听器
            </summary>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisEventListener.MuxerConfigurationChanged(System.Object,StackExchange.Redis.EndPointEventArgs)">
            <summary>
            配置更改时
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisEventListener.MuxerErrorMessage(System.Object,StackExchange.Redis.RedisErrorEventArgs)">
            <summary>
            发生错误时
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisEventListener.MuxerConnectionRestored(System.Object,StackExchange.Redis.ConnectionFailedEventArgs)">
            <summary>
            重新建立连接之前的错误
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisEventListener.MuxerConnectionFailed(System.Object,StackExchange.Redis.ConnectionFailedEventArgs)">
            <summary>
            连接失败 ， 如果重新连接成功你将不会收到这个通知
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisEventListener.MuxerHashSlotMoved(System.Object,StackExchange.Redis.HashSlotMovedEventArgs)">
            <summary>
            更改集群
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisEventListener.MuxerInternalError(System.Object,StackExchange.Redis.InternalErrorEventArgs)">
            <summary>
            redis类库错误
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ES.Data.Database.Redis.RedisHelper">
            <summary>
            Redis内存缓存数据库助手
            <para>不可继承</para>
            </summary>
        </member>
        <member name="F:ES.Data.Database.Redis.RedisHelper.multiplexer">
            <summary>
            redis 多路调制器
            </summary>
        </member>
        <member name="P:ES.Data.Database.Redis.RedisHelper.prefixKey">
            <summary>
            前缀键
            </summary>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.#ctor(System.String,System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="readWriteHosts">redis 连接地址 ip:port 也可根据需要追加一些配置</param>
            <param name="dbIndex">数据库索引, 默认 索引位为0</param>
            <param name="prefixKey">前缀键</param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.AddEventListener(ES.Data.Database.Redis.RedisEventListener)">
            <summary>
            增加事件监听
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.StringSet(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            保存单个key value
            </summary>
            <param name="key">Redis Key</param>
            <param name="value">保存的值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.StringSet(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue}})">
            <summary>
            保存多个key value
            </summary>
            <param name="keyValues">键值对</param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.Set``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.StringGet(System.String)">
            <summary>
            获取单个key的值
            </summary>
            <param name="key">Redis Key</param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.StringGet(System.Collections.Generic.List{System.String})">
            <summary>
            获取多个Key
            </summary>
            <param name="listKey">Redis Key集合</param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.Get``1(System.String)">
            <summary>
            获取一个key的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.StringIncrement(System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.StringDecrement(System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.StringSetAsync(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            保存单个key value
            </summary>
            <param name="key">Redis Key</param>
            <param name="value">保存的值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.StringSetAsync(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue}})">
            <summary>
            保存多个key value
            </summary>
            <param name="keyValues">键值对</param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.StringSetAsync``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.StringGetAsync(System.String)">
            <summary>
            获取单个key的值
            </summary>
            <param name="key">Redis Key</param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.StringGetAsync(System.Collections.Generic.List{System.String})">
            <summary>
            获取多个Key
            </summary>
            <param name="listKey">Redis Key集合</param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.StringGetAsync``1(System.String)">
            <summary>
            获取一个key的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.StringIncrementAsync(System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.StringDecrementAsync(System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.HashExists(System.String,System.String)">
            <summary>
            判断某个数据是否已经被缓存
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.HashSet``1(System.String,System.String,``0)">
            <summary>
            存储数据到hash表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.HashDelete(System.String,System.String)">
            <summary>
            移除hash中的某值
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.HashDelete(System.String,System.Collections.Generic.List{StackExchange.Redis.RedisValue})">
            <summary>
            移除hash中的多个值
            </summary>
            <param name="key"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.HashGet``1(System.String,System.String)">
            <summary>
            从hash表获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.HashIncrement(System.String,System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.HashDecrement(System.String,System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.HashKeys``1(System.String)">
            <summary>
            获取hashkey所有Redis key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.HashExistsAsync(System.String,System.String)">
            <summary>
            判断某个数据是否已经被缓存
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.HashSetAsync``1(System.String,System.String,``0)">
            <summary>
            存储数据到hash表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.HashDeleteAsync(System.String,System.String)">
            <summary>
            移除hash中的某值
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.HashDeleteAsync(System.String,System.Collections.Generic.List{StackExchange.Redis.RedisValue})">
            <summary>
            移除hash中的多个值
            </summary>
            <param name="key"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.HashGeAsync``1(System.String,System.String)">
            <summary>
            从hash表获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.HashIncrementAsync(System.String,System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.HashDecrementAsync(System.String,System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.HashKeysAsync``1(System.String)">
            <summary>
            获取hashkey所有Redis key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.ListRemove``1(System.String,``0)">
            <summary>
            移除指定ListId的内部List的值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.ListRange``1(System.String)">
            <summary>
            获取指定key的List
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.ListRightPush``1(System.String,``0)">
            <summary>
            入队
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.ListRightPop``1(System.String)">
            <summary>
            出队
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.ListLeftPush``1(System.String,``0)">
            <summary>
            入栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.ListLeftPop``1(System.String)">
            <summary>
            出栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.ListLength(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.ListRemoveAsync``1(System.String,``0)">
            <summary>
            移除指定ListId的内部List的值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.ListRangeAsync``1(System.String)">
            <summary>
            获取指定key的List
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.ListRightPushAsync``1(System.String,``0)">
            <summary>
            入队
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.ListRightPopAsync``1(System.String)">
            <summary>
            出队
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.ListLeftPushAsync``1(System.String,``0)">
            <summary>
            入栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.ListLeftPopAsync``1(System.String)">
            <summary>
            出栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.ListLengthAsync(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.SortedSetAdd``1(System.String,``0,System.Double)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="score"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.SortedSetRemove``1(System.String,``0)">
            <summary>
            删除
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.SortedSetRangeByRank``1(System.String)">
            <summary>
            获取全部
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.SortedSetLength(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.SortedSetAddAsync``1(System.String,``0,System.Double)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="score"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.SortedSetRemoveAsync``1(System.String,``0)">
            <summary>
            删除
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.SortedSetRangeByRankAsync``1(System.String)">
            <summary>
            获取全部
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.SortedSetLengthAsync(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.KeyDelete(System.String)">
            <summary>
            删除单个key
            </summary>
            <param name="key">redis key</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.KeyDelete(System.Collections.Generic.List{System.String})">
            <summary>
            删除多个key
            </summary>
            <param name="keys">rediskey</param>
            <returns>成功删除的个数</returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.KeyExists(System.String)">
            <summary>
            判断key是否存储
            </summary>
            <param name="key">redis key</param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.KeyRename(System.String,System.String)">
            <summary>
            重新命名key
            </summary>
            <param name="key">就的redis key</param>
            <param name="newKey">新的redis key</param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.KeyExpire(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            设置Key的时间
            </summary>
            <param name="key">redis key</param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.Subscribe(System.String,System.Action{StackExchange.Redis.RedisChannel,StackExchange.Redis.RedisValue})">
            <summary>
            Redis发布订阅  订阅
            </summary>
            <param name="subChannel"></param>
            <param name="handler"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.Publish``1(System.String,``0)">
            <summary>
            Redis发布订阅  发布
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.Unsubscribe(System.String)">
            <summary>
            Redis发布订阅  取消订阅
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.UnsubscribeAll">
            <summary>
            Redis发布订阅  取消全部订阅
            </summary>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.CreateTransaction">
            <summary>
            创建事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.GetDatabase">
            <summary>
            获取数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.GetServer(System.String)">
            <summary>
            获取服务器
            </summary>
            <param name="hostAndPort"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.SetPrefixKey(System.String)">
            <summary>
            设置前缀
            </summary>
            <param name="prefixKey"></param>
        </member>
        <member name="M:ES.Data.Database.Redis.RedisHelper.Close(System.Boolean)">
            <summary>
            关闭redis连接
            </summary>
            <param name="allowCommandsToComplete"></param>
        </member>
        <member name="T:ES.Data.Database.SQLServer.CommandResult">
            <summary>
            SQL语句执行对象结果
            </summary>
        </member>
        <member name="P:ES.Data.Database.SQLServer.CommandResult.effectNum">
            <summary>
            单表执行影响行数
            <para>此值大于等于0的情况才代表执行成功，大于0的情况表示对数据有记录或影响</para>
            </summary>
        </member>
        <member name="P:ES.Data.Database.SQLServer.CommandResult.collection">
            <summary>
            执行数据合集
            </summary>
        </member>
        <member name="P:ES.Data.Database.SQLServer.CommandResult.dataSet">
            <summary>
            数据总合集
            </summary>
        </member>
        <member name="T:ES.Data.Database.SQLServer.ISQLServerDBHelperException">
            <summary>
            SQLServer数据库助手异常捕获
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.ISQLServerDBHelperException.CheckConnectedException(ES.Data.Database.SQLServer.SQLServerDBHelper,System.Exception)">
            <summary>
            检测连接状态异常
            </summary>
            <param name="helper">数据库助手</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:ES.Data.Database.SQLServer.ISQLServerDBHelperException.CommandSQLException(ES.Data.Database.SQLServer.SQLServerDBHelper,System.String,System.Exception)">
            <summary>
            执行SQL异常
            </summary>
            <param name="helper">数据库助手</param>
            <param name="sql">sql语句</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:ES.Data.Database.SQLServer.ISQLServerDBHelperException.ProcedureException(ES.Data.Database.SQLServer.SQLServerDBHelper,System.String,System.Data.SqlClient.SqlParameter[],System.Exception)">
            <summary>
            存储过程异常
            </summary>
            <param name="helper">数据库助手</param>
            <param name="procedure">存储过程</param>
            <param name="sqlParameters">参数</param>
            <param name="exception">异常</param>
        </member>
        <member name="T:ES.Data.Database.SQLServer.Linq.ConfigLoader`1">
            <summary>
            SQLServer基础配置加载器
            </summary>
        </member>
        <member name="P:ES.Data.Database.SQLServer.Linq.ConfigLoader`1.Configs">
            <summary>
            配置集合
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.ConfigLoader`1.#ctor(ES.Data.Database.SQLServer.SQLServerDBHelper,System.String)">
            <summary>
            加载器构造函数
            <para>此操作是利用sql查询到结果然后进行绑定</para>
            </summary>
            <param name="dBHelper">数据库连接对象</param>
            <param name="sql">需要查询的语句</param>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.ConfigLoader`1.Find(System.Object)">
            <summary>
            查找主键所对应的值
            </summary>
            <param name="value">对象值</param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.ConfigLoader`1.Reload">
            <summary>
            重新读取配置
            </summary>
        </member>
        <member name="T:ES.Data.Database.SQLServer.Linq.ConfigLoaderItem">
            <summary>
            SQLServer基础配置加载器单个配置
            <para>继承这个类，并且自定义数据表中各个字段，然后通过SetConfig进行绑定</para>
            </summary>
        </member>
        <member name="P:ES.Data.Database.SQLServer.Linq.ConfigLoaderItem.___PrimaryKey">
            <summary>
            主键 内部变量
            <para>对某个字段值进行绑定</para>
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.ConfigLoaderItem.SetESPrimaryKey(System.Data.DataRow)">
            <summary>
            设置主键
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.ConfigLoaderItem.SetESConfig(System.Data.DataRow)">
            <summary>
            设置配置
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.ConfigLoaderItem.SetPrimaryKey(System.Data.DataRow)">
            <summary>
            设置主键
            <para>此函数直接返回主键对象进行绑定</para>
            </summary>
            <param name="row">单个配置数据记录</param>
            <returns>返回主键对象</returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.ConfigLoaderItem.SetConfig(System.Data.DataRow)">
            <summary>
            设置配置
            <para>对需要的配置进行绑定对象</para>
            </summary>
            <param name="row">单个配置数据记录</param>
        </member>
        <member name="T:ES.Data.Database.SQLServer.Linq.DataAgentObject`1">
            <summary>
            数据对象
            <para>此类为了解决手动频繁装/卸箱操作设计</para>
            <para>DataAgentRow可以直接得到object，但是每次都需要强转值才行</para>
            <para>使用此类可以一次成型</para>
            </summary>
        </member>
        <member name="P:ES.Data.Database.SQLServer.Linq.DataAgentObject`1.Name">
            <summary>
            对象名字
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.DataAgentObject`1.#ctor(System.String,ES.Data.Database.SQLServer.Linq.DataAgentRow)">
            <summary>
            通过名字和数据记录得到一个数据对象
            </summary>
            <param name="name">数据记录中数据对象的名字</param>
            <param name="p">数据记录对象 弱对象</param>
        </member>
        <member name="P:ES.Data.Database.SQLServer.Linq.DataAgentObject`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:ES.Data.Database.SQLServer.Linq.DataAgentRow">
            <summary>
            数据记录[线程安全]
            <para>数据不进行任何读写操作一定时间[默认300s有效]后，下一次读取必定重新读取数据库最新数据</para>
            </summary>
        </member>
        <member name="P:ES.Data.Database.SQLServer.Linq.DataAgentRow.Item(System.String)">
            <summary>
            获取数据对象数据
            <para>这个可以直接获得未转类型的对象</para>
            <para>但是更加推荐使用 GetObject 来获取</para>
            </summary>
            <param name="key">主键</param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.DataAgentRow.GetObject``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">基础引用类型</typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:ES.Data.Database.SQLServer.Linq.DataAgentRow.Count">
            <summary>
            获取字段数量
            </summary>
        </member>
        <member name="P:ES.Data.Database.SQLServer.Linq.DataAgentRow.PrimaryKeyValue">
            <summary>
            获取主键值
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.DataAgentRow.ReloadDB">
            <summary>
            重读数据库
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.DataAgentRow.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="T:ES.Data.Database.SQLServer.Linq.DataAgentRows">
            <summary>
            Sqlserver数据缓存助理数据组[线程安全]
            <para>是一个集成化数据高速操作（查询，更新）的助手对象</para>
            <para>使用此类可以更加有效的进行数据库数据的常规操作。</para>
            <para>此类固定同步数据库周期为：1秒</para>
            <para>数据助理产生的对象</para>
            <para>用于托管数据操作的代理类</para>
            <para>如果有一条数据不进行任何读写操作一定时间[默认300s有效]后，下一次操作必定重新读取数据库最新数据</para>
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.Linq.DataAgentRows.dBHelper">
            <summary>
            数据库对象
            </summary>
        </member>
        <member name="P:ES.Data.Database.SQLServer.Linq.DataAgentRows.tableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:ES.Data.Database.SQLServer.Linq.DataAgentRows.primaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:ES.Data.Database.SQLServer.Linq.DataAgentRows.fieldNames">
            <summary>
            查询的字段名
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.Linq.DataAgentRows.rows">
            <summary>
            记录字典
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.Linq.DataAgentRows.realPeriod">
            <summary>
            实际周期
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.Linq.DataAgentRows.period">
            <summary>
            当前周期记录
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.DataAgentRows.Load(ES.Data.Database.SQLServer.SQLServerDBHelper,System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            读取数据对
            </summary>
            <param name="dBHelper">数据库链接对象</param>
            <param name="primaryKey">主键名，用于更新和寻找唯一依据字段</param>
            <param name="tableName">SQL表名</param>
            <param name="whereCondition">SQL条件判断条件【Where语句后的内容 包括排序等】</param>
            <param name="fieldNames">SQL字段名【默认为：*】</param>
            <param name="topNum">SQL取值数量【默认为：-1 无限】</param>
            <param name="isNoLock">是否不锁Sql，默认锁表</param>
            <returns></returns>
        </member>
        <member name="P:ES.Data.Database.SQLServer.Linq.DataAgentRows.Item(System.Object)">
            <summary>
            获取数据对象数据
            </summary>
            <param name="key">主键</param>
            <returns></returns>
        </member>
        <member name="P:ES.Data.Database.SQLServer.Linq.DataAgentRows.Length">
            <summary>
            获取记录数量
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.DataAgentRows.#ctor(ES.Data.Database.SQLServer.SQLServerDBHelper,System.Data.DataRowCollection,System.String,System.String,System.String)">
            <summary>
            命名空间构造函数
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.DataAgentRows.SetSyncPeriod(System.Int32)">
            <summary>
            设置缓存同步周期
            </summary>
            <param name="second">同步周期，单位s【小于等于0都为1s】</param>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.DataAgentRows.CommitDB">
            <summary>
            提交至数据库
            <para>将所有缓存数据立刻写入数据库</para>
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.DataAgentRows.SetExpiredTime(System.Int32)">
            <summary>
            设置数据过期时间，过期后会从数据库中重新拉取
            </summary>
            <param name="sec">过期时间，单位s【小于等于0都为1s】</param>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.DataAgentRows.UpdateDBHandle(System.Int32)">
            <summary>
            更新句柄
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.DataAgentRows.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.DataAgentRows.Update(System.Int32)">
            <summary>
            更新句柄【不需要操作】
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.DataAgentRows.UpdateEnd">
            <summary>
            停止更新
            </summary>
        </member>
        <member name="T:ES.Data.Database.SQLServer.Linq.NoDBStorage`2">
            <summary>
            非关系型存储类
            <para>此类设计灵感源于非关系型数据库中基础原理</para>
            <para>使用起来只需要知道数据库中取出值和筛选条件即可类似使用字典方式来实现高速访问改变以及同步持久化</para>
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.NoDBStorage`2.#ctor(ES.Data.Database.SQLServer.SQLServerDBHelper,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            创建一个非关系型数据存储类
            </summary>
            <param name="dBHelper">对应的数据对象</param>
            <param name="keyName">数据所对应数据库中的key名</param>
            <param name="valueName">数据所对应数据库中的value名</param>
            <param name="tableName">数据所对应数据库的表名</param>
            <param name="syncPeriod">同步周期 用于控制写入到持久化数据库的时间 单位 毫秒 默认 1000ms</param>
            <param name="condition">数据查询的其他条件 如不需要则默认值即可，注意此处不需要再次写入key名所对应的条件了</param>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.NoDBStorage`2.ContainsKey(`0)">
            <summary>
            是否包含键
            </summary>
            <param name="key">键</param>
            <returns>存在为真，否则为假</returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.NoDBStorage`2.TryGetValue(`0,`1@)">
            <summary>
            获取值
            </summary>
            <param name="key">key值</param>
            <param name="value">获取到的value值 失败为默认值</param>
            <returns>成功状态</returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.NoDBStorage`2.TryAdd(`0,`1)">
            <summary>
            增加新的数据
            <para>注意使用此函数 请确保该记录不受其他约束条件影响 否则可能会在持久化存储中插入失败</para>
            </summary>
            <param name="key">key值</param>
            <param name="value">value值</param>
            <returns>如果已存在则返回 false</returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.NoDBStorage`2.SetValue(`0,`1)">
            <summary>
            设置值
            </summary>
            <param name="key">key值</param>
            <param name="value">需要写入的value</param>
            <returns>成功状态</returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.NoDBStorage`2.DeleteKey(`0)">
            <summary>
            删除键
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.NoDBStorage`2.Flush">
            <summary>
            立即更新数据库
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.NoDBStorage`2.Clear">
            <summary>
            清空所有数据
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.NoDBStorage`2.Update(System.Int32)">
            <summary>
            系统调用
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.NoDBStorage`2.UpdateEnd">
            <summary>
            停止更新
            </summary>
        </member>
        <member name="T:ES.Data.Database.SQLServer.Linq.SQLBuilder">
            <summary>
            SQL语句构建器
            <para>适合简单的语句构建</para>
            <para>可以帮助开发者减少拼写sql语句带来的不便</para>
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.SQLBuilder.#ctor(ES.Data.Database.SQLServer.SQLServerDBHelper)">
            <summary>
            构建函数
            <para>需要传入一个非空数据库助手实例对象</para>
            </summary>
            <param name="dBHelper">数据库助手实例</param>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.SQLBuilder.Create(ES.Data.Database.SQLServer.SQLServerDBHelper)">
            <summary>
            创建一个构造器
            <para>需要传入一个非空数据库助手实例对象</para>
            </summary>
            <param name="dBHelper">数据库助手实例</param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.SQLBuilder.Top(System.Int32)">
            <summary>
            顶部数量
            </summary>
            <param name="topCount"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.SQLBuilder.Fields(System.String[])">
            <summary>
            字段
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.SQLBuilder.Values(System.Object[])">
            <summary>
            值
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.SQLBuilder.Table(System.String)">
            <summary>
            表名
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.SQLBuilder.Where(System.String)">
            <summary>
            条件
            </summary>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.SQLBuilder.Select(System.Boolean)">
            <summary>
            查询
            </summary>
            <param name="isLock">是否锁（NOLOCK) 默认有锁</param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.SQLBuilder.Insert">
            <summary>
            插入
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.SQLBuilder.Update">
            <summary>
            更新
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Linq.SQLBuilder.Delete">
            <summary>
            删除
            </summary>
            <returns></returns>
        </member>
        <member name="T:ES.Data.Database.SQLServer.Parameter">
            <summary>
            ES存储过程参数
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Parameter.Create(System.String,System.Object)">
            <summary>
            SQL过程函数参数 0
            </summary>
            <param name="parameterName">参数名</param>
            <param name="value">值</param>
            <returns>返回一个参数对象</returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Parameter.Create(System.String,System.Object,ES.Data.Database.SQLServer.SQLServerDbType)">
            <summary>
            SQL过程函数参数 1
            </summary>
            <param name="parameterName">参数名</param>
            <param name="value">值</param>
            <param name="sqlDbType">值类型</param>
            <returns>返回一个参数对象</returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Parameter.Create(System.String,System.Object,ES.Data.Database.SQLServer.SQLServerDbType,ES.Data.Database.SQLServer.ParameterDirection)">
            <summary>
            SQL过程函数参数 2
            </summary>
            <param name="parameterName">参数名</param>
            <param name="value">值</param>
            <param name="sqlDbType">值类型</param>
            <param name="direction">方向</param>
            <returns>返回一个参数对象</returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Parameter.Create(System.String,ES.Data.Database.SQLServer.SQLServerDbType,ES.Data.Database.SQLServer.ParameterDirection)">
            <summary>
            SQL过程函数参数 3
            </summary>
            <param name="parameterName">参数名</param>
            <param name="sqlDbType">值类型</param>
            <param name="direction">方向</param>
            <returns>返回一个参数对象</returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Parameter.Create(System.String,ES.Data.Database.SQLServer.SQLServerDbType,System.Int32,ES.Data.Database.SQLServer.ParameterDirection)">
            <summary>
            SQL过程函数参数 4
            </summary>
            <param name="parameterName">参数名</param>
            <param name="sqlDbType">值类型</param>
            <param name="size">值预设大小</param>
            <param name="direction">方向</param>
            <returns>返回一个参数对象</returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Parameter.Create(System.String,System.Object,ES.Data.Database.SQLServer.SQLServerDbType,System.Int32,ES.Data.Database.SQLServer.ParameterDirection)">
            <summary>
            SQL过程函数参数 5
            </summary>
            <param name="parameterName">参数名</param>
            <param name="value">值</param>
            <param name="sqlDbType">值类型</param>
            <param name="size">值预设大小</param>
            <param name="direction">方向</param>
            <returns>返回一个参数对象</returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Parameter.ToParameter(System.String,System.Object)">
            <summary>
            转换为SQL Parameter对象
            </summary>
            <param name="parameterName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Parameter.ToParameter(System.String,System.Object,ES.Data.Database.SQLServer.SQLServerDbType)">
            <summary>
            转换为SQL Parameter对象
            </summary>
            <param name="parameterName"></param>
            <param name="value"></param>
            <param name="sqlDbType"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Parameter.ToParameter(System.String,System.Object,ES.Data.Database.SQLServer.SQLServerDbType,ES.Data.Database.SQLServer.ParameterDirection)">
            <summary>
            转换为SQL Parameter对象
            </summary>
            <param name="parameterName"></param>
            <param name="value"></param>
            <param name="sqlDbType"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Parameter.ToParameter(System.String,ES.Data.Database.SQLServer.SQLServerDbType,System.Int32,ES.Data.Database.SQLServer.ParameterDirection)">
            <summary>
            转换为SQL Parameter对象
            </summary>
            <param name="parameterName"></param>
            <param name="sqlDbType"></param>
            <param name="size"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.Parameter.ToParameter(System.String,System.Object,ES.Data.Database.SQLServer.SQLServerDbType,System.Int32,ES.Data.Database.SQLServer.ParameterDirection)">
            <summary>
            转换为SQL Parameter对象
            </summary>
            <param name="parameterName"></param>
            <param name="value"></param>
            <param name="sqlDbType"></param>
            <param name="size"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="T:ES.Data.Database.SQLServer.ParameterDirection">
            <summary>
            Specifies the type of a parameter within a query relative to the System.Data.DataSet.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.ParameterDirection.Input">
            <summary>
            The parameter is an input parameter.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.ParameterDirection.Output">
            <summary>
            The parameter is an output parameter.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.ParameterDirection.InputOutput">
            <summary>
            The parameter is capable of both input and output.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.ParameterDirection.ReturnValue">
            <summary>
            The parameter represents a return value from an operation such as a stored procedure,
            built-in function, or user-defined function.
            </summary>
        </member>
        <member name="T:ES.Data.Database.SQLServer.ProcedureCmd">
            <summary>
            存储过程指令
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.ProcedureCmd.procedure">
            <summary>
            存储过程名
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.ProcedureCmd.sqlParameters">
            <summary>
            参数
            </summary>
        </member>
        <member name="T:ES.Data.Database.SQLServer.ProcedureResult">
            <summary>
            存储过程结果集
            </summary>
        </member>
        <member name="P:ES.Data.Database.SQLServer.ProcedureResult.returnValue">
            <summary>
            返回结果
            </summary>
        </member>
        <member name="P:ES.Data.Database.SQLServer.ProcedureResult.procedure">
            <summary>
            存储过程
            </summary>
        </member>
        <member name="P:ES.Data.Database.SQLServer.ProcedureResult.SqlParameters">
            <summary>
            执行数据输出参数
            </summary>
        </member>
        <member name="P:ES.Data.Database.SQLServer.ProcedureResult.Tables">
            <summary>
            执行数据合集
            </summary>
        </member>
        <member name="P:ES.Data.Database.SQLServer.ProcedureResult.isCompleted">
            <summary>
            是否已完成
            <para>为True代表存储过程完整执行成功，False表示有异常</para>
            </summary>
        </member>
        <member name="T:ES.Data.Database.SQLServer.SQLServerDBHelper">
            <summary>
            SQLServer数据库访问助手
            <para>数据库异常可以通过 异常监听来获取</para>
            <para>详情参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqlconnection.connectionstring</para>
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDBHelper.builder">
            <summary>
            数据连接参数构造器
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDBHelper.SQLQueue">
            <summary>
            sql队列用于缓存通过压入队列执行的sql对象
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDBHelper.listener">
            <summary>
            数据库异常监听
            </summary>
        </member>
        <member name="P:ES.Data.Database.SQLServer.SQLServerDBHelper.Now">
            <summary>
            获取数据库时间
            <para>如果数据库异常导致查询失败，则默认返回DateTime.Now</para>
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.SQLServerDBHelper.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            SqlServer助手构造函数
            <para>存在参数不需要再次在额外配置中设置</para>
            <para>详情参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqlconnection.connectionstring</para>
            </summary>
            <param name="address">数据库地址，如果非默认端口需要带端口号，注意地址与端口号是以逗号分隔的</param>
            <param name="username">数据库账号</param>
            <param name="password">数据库密码</param>
            <param name="databaseName">数据库名称，默认为空</param>
            <param name="minPoolSize">数据库池连接最小值，默认为0</param>
            <param name="maxPoolSize">数据库池连接最大值，默认为100</param>
            <param name="extraConfig">数据库额外配置</param>
        </member>
        <member name="M:ES.Data.Database.SQLServer.SQLServerDBHelper.#ctor(System.String)">
            <summary>
            SqlServer助手构造函数
            <para>详情参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqlconnection.connectionstring</para>
            </summary>
            <param name="connectionString">连接配置</param>
        </member>
        <member name="M:ES.Data.Database.SQLServer.SQLServerDBHelper.#ctor(System.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
            SqlServer助手构造函数
            <para>详情参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqlconnection.connectionstring</para>
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.SQLServerDBHelper.SetExceptionListener(ES.Data.Database.SQLServer.ISQLServerDBHelperException)">
            <summary>
            设置异常监听
            </summary>
            <param name="listener">异常监听器</param>
        </member>
        <member name="M:ES.Data.Database.SQLServer.SQLServerDBHelper.CheckConnected">
            <summary>
            检查是否连接
            </summary>
            <returns>成功连接返回true</returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.SQLServerDBHelper.GetConnectionString">
            <summary>
            获取数据库连接地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.SQLServerDBHelper.Procedure(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            存储过程 1
            <para>返回值默认为整型，长度为4</para>
            </summary>
            <param name="procedure">存储过程名称</param>
            <param name="sqlParameters">存储过程参数 建议使用Parameter生成</param>
            <returns>返回 ProcedureResult 失败为null</returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.SQLServerDBHelper.Procedure(System.String,ES.Data.Database.SQLServer.SQLServerDbType,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            存储过程 2
            </summary>
            <param name="procedure">存储过程名称</param>
            <param name="retvalueDbType">返回值类型</param>
            <param name="retvalueSize">返回值大小</param>
            <param name="sqlParameters">存储过程参数 建议使用Parameter生成</param>
            <returns>返回 ProcedureResult 失败为null</returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.SQLServerDBHelper.ProcedureNonQuery(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            存储过程 3
            <para>不需要返回任何数据</para>
            </summary>
            <param name="procedure">存储过程名称</param>
            <param name="sqlParameters">存储过程参数 建议使用Parameter生成</param>
            <returns>影响数量 -1表示异常</returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.SQLServerDBHelper.CommandSQL(System.String,System.Object[])">
            <summary>
            执行查询SQL语句
            <para>SELECT适用和部分需要更新返回的SQL</para>
            </summary>
            <param name="sql">执行SQL</param>
            <param name="obj">格式化参数输入【类似string.Format】</param>
            <returns>返回成功与否</returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.SQLServerDBHelper.ExecuteSQL(System.String,System.Object[])">
            <summary>
            执行修改SQL语句
            <para>非SELECT适用，只需要影响行数</para>
            </summary>
            <param name="sql">执行SQL</param>
            <param name="obj">格式化参数输入【类似string.Format】</param>
            <returns>返回影响条数</returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.SQLServerDBHelper.PushSQL(System.String,System.Object[])">
            <summary>
            压入SQL队列，等待统一顺序执行【异步】
            <para>此操作适合非查询操作SQL,且对数据实时更新无要求的情况下方可使用</para>
            <para>脱离主线程由其他线程处理数据</para>
            </summary>
            <param name="sql">执行SQL</param>
            <param name="obj">格式化参数输入【类似string.Format】</param>
        </member>
        <member name="M:ES.Data.Database.SQLServer.SQLServerDBHelper.PushProcedure(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            压入SQL队列，等待统一顺序执行【异步】
            <para>此操作适合非查询操作SQL,且对数据实时更新无要求的情况下方可使用</para>
            <para>脱离主线程由其他线程处理数据</para>
            </summary>
            <param name="procedure">存储过程名称</param>
            <param name="sqlParameters">存储过程参数 建议使用Parameter生成</param>
            <returns>返回成功与否</returns>
        </member>
        <member name="M:ES.Data.Database.SQLServer.SQLServerDBHelper.LoadDataCache(System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            加载数据缓存
            <para>同 DataAgent 使用相同</para>
            </summary>
            <param name="primaryKey">主键名，用于更新和寻找唯一依据字段</param>
            <param name="tableName">SQL表名</param>
            <param name="whereCondition">SQL条件判断条件【Where语句后的内容 包括排序等】</param>
            <param name="fieldNames">SQL字段名【默认为：*】</param>
            <param name="topNum">SQL取值数量【默认为：-1 无限】</param>
            <param name="isNoLock">是否不锁Sql，默认锁表</param>
            <returns></returns>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDBHelper.periodUpdate">
            <summary>
            同步时间周期记录
            </summary>
        </member>
        <member name="M:ES.Data.Database.SQLServer.SQLServerDBHelper.Update(System.Int32)">
            <summary>
            通过时间流来更新通过队列执行的SQL
            <para>固定周期为 1s</para>
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:ES.Data.Database.SQLServer.SQLServerDBHelper.UpdateEnd">
            <summary>
            停止更新
            </summary>
        </member>
        <member name="T:ES.Data.Database.SQLServer.SQLServerDbType">
            <summary>
            ES存储过程 参数类型
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.BigInt">
            <summary>
            System.Int64. A 64-bit signed integer.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.Binary">
            <summary>
            System.Array of type System.Byte. A fixed-length stream of binary data ranging
            between 1 and 8,000 bytes.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.Bit">
            <summary>
            System.Boolean. An unsigned numeric value that can be 0, 1, or null.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.Char">
            <summary>
            System.String. A fixed-length stream of non-Unicode characters ranging between
            1 and 8,000 characters.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.DateTime">
            <summary>
            System.DateTime. Date and time data ranging in value from January 1, 1753 to
            December 31, 9999 to an accuracy of 3.33 milliseconds.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.Decimal">
            <summary>
            System.Decimal. A fixed precision and scale numeric value between -10 38 -1 and
            10 38 -1.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.Float">
            <summary>
            System.Double. A floating point number within the range of -1.79E +308 through
            1.79E +308.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.Image">
            <summary>
            System.Array of type System.Byte. A variable-length stream of binary data ranging
            from 0 to 2 31 -1 (or 2,147,483,647) bytes.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.Int">
            <summary>
            System.Int32. A 32-bit signed integer.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.Money">
            <summary>
            System.Decimal. A currency value ranging from -2 63 (or -9,223,372,036,854,775,808)
            to 2 63 -1 (or +9,223,372,036,854,775,807) with an accuracy to a ten-thousandth
            of a currency unit.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.NChar">
            <summary>
            System.String. A fixed-length stream of Unicode characters ranging between 1
            and 4,000 characters.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.NText">
            <summary>
            System.String. A variable-length stream of Unicode data with a maximum length
            of 2 30 - 1 (or 1,073,741,823) characters.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.NVarChar">
            <summary>
            System.String. A variable-length stream of Unicode characters ranging between
            1 and 4,000 characters. Implicit conversion fails if the string is greater than
            4,000 characters. Explicitly set the object when working with strings longer
            than 4,000 characters. Use System.Data.SqlDbType.NVarChar when the database column
            is nvarchar(max).
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.Real">
            <summary>
            System.Single. A floating point number within the range of -3.40E +38 through
            3.40E +38.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.UniqueIdentifier">
            <summary>
            System.Guid. A globally unique identifier (or GUID).
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.SmallDateTime">
            <summary>
            System.DateTime. Date and time data ranging in value from January 1, 1900 to
            June 6, 2079 to an accuracy of one minute.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.SmallInt">
            <summary>
            System.Int16. A 16-bit signed integer.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.SmallMoney">
            <summary>
            System.Decimal. A currency value ranging from -214,748.3648 to +214,748.3647
            with an accuracy to a ten-thousandth of a currency unit.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.Text">
            <summary>
            System.String. A variable-length stream of non-Unicode data with a maximum length
            of 2 31 -1 (or 2,147,483,647) characters.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.Timestamp">
            <summary>
            System.Array of type System.Byte. Automatically generated binary numbers, which
            are guaranteed to be unique within a database. timestamp is used typically as
            a mechanism for version-stamping table rows. The storage size is 8 bytes.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.TinyInt">
            <summary>
            System.Byte. An 8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.VarBinary">
            <summary>
            System.Array of type System.Byte. A variable-length stream of binary data ranging
            between 1 and 8,000 bytes. Implicit conversion fails if the byte array is greater
            than 8,000 bytes. Explicitly set the object when working with byte arrays larger
            than 8,000 bytes.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.VarChar">
            <summary>
            System.String. A variable-length stream of non-Unicode characters ranging between
            1 and 8,000 characters. Use System.Data.SqlDbType.VarChar when the database column
            is varchar(max).
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.Variant">
            <summary>
            System.Object. A special data type that can contain numeric, string, binary,
            or date data as well as the SQL Server values Empty and Null, which is assumed
            if no other type is declared.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.Xml">
            <summary>
            An XML value. Obtain the XML as a string using the System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)
            method or System.Data.SqlTypes.SqlXml.Value property, or as an System.Xml.XmlReader
            by calling the System.Data.SqlTypes.SqlXml.CreateReader method.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.Udt">
            <summary>
            A SQL Server user-defined type (UDT).
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.Structured">
            <summary>
            A special data type for specifying structured data contained in table-valued
            parameters.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.Date">
            <summary>
            Date data ranging in value from January 1,1 AD through December 31, 9999 AD.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.Time">
            <summary>
            Time data based on a 24-hour clock. Time value range is 00:00:00 through 23:59:59.9999999
            with an accuracy of 100 nanoseconds. Corresponds to a SQL Server time value.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.DateTime2">
            <summary>
            Date and time data. Date value range is from January 1,1 AD through December
            31, 9999 AD. Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy
            of 100 nanoseconds.
            </summary>
        </member>
        <member name="F:ES.Data.Database.SQLServer.SQLServerDbType.DateTimeOffset">
            <summary>
            Date and time data with time zone awareness. Date value range is from January
            1,1 AD through December 31, 9999 AD. Time value range is 00:00:00 through 23:59:59.9999999
            with an accuracy of 100 nanoseconds. Time zone value range is -14:00 through
            +14:00.
            </summary>
        </member>
        <member name="T:ES.Data.Storage.EasyStorage">
            <summary>
            简单信息存储,也可以自己读/写入新文件
            <para>用于文本生成一些由用户或机器产生的持久数据存储</para>
            <para>默认存储文件为根目录下:default.json</para>
            </summary>
        </member>
        <member name="F:ES.Data.Storage.EasyStorage.jsonCache">
            <summary>
            json缓存
            </summary>
        </member>
        <member name="M:ES.Data.Storage.EasyStorage.GetAll">
            <summary>
            获取所有信息内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Storage.EasyStorage.Get(System.String)">
            <summary>
            获取对应key值数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Data.Storage.EasyStorage.Set(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            设置某个key值数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ES.Data.Storage.EasyStorage.WriteData(System.String,System.String,System.String)">
            <summary>
            写入数据
            </summary>
            <param name="data">数据内容</param>
            <param name="fileName">文件名和后缀类型，这里不需要带路径</param>
            <param name="path">路径[路径最后需要包含斜杠]，默认当前程序根目录</param>
        </member>
        <member name="M:ES.Data.Storage.EasyStorage.ReadData(System.String,System.String)">
            <summary>
            读取数据
            </summary>
            <param name="fileName">文件名和后缀类型，这里不需要带路径</param>
            <param name="path">路径[路径最后需要包含斜杠]，默认当前程序根目录</param>
        </member>
        <member name="T:ES.Hotfix.Agent`1">
            <summary>
            热更代理
            <para>只有继承这个代理类才能在热更层使用其泛型的变量值</para>
            <para>继承此类使用数据层变量请用 self 代替 this </para>
            <para>代理类中函数如果存在委托情况，请注意如仅存于非热更层的委托可能存在问题</para>
            <para>此类事代理类，请不要使用代理类来直接声明变量或属性</para>
            <para>当然如果真的有需要，可以使用 AgentDataPivot 类来存储变量实现热更层声明变量</para>
            <para>另外虽然可以在热更层通过代理来直接传值达到既可以使用函数又可以读取值，但还是建议使用代理数据类来传递</para>
            </summary>
            <typeparam name="T">代理数据类型</typeparam>
        </member>
        <member name="P:ES.Hotfix.Agent`1.self">
            <summary>
            代理类对象
            <para>通过此对象可以获取代理数据的对象，相当于this的用法</para>
            </summary>
        </member>
        <member name="T:ES.Hotfix.AgentData">
            <summary>
            代理数据
            <para>只有通过继承代理数据的类才能使用热更代理层函数</para>
            <para>此类事代理数据类，代理类的变量或属性需要从此声明来使用</para>
            <para>需要在热更层使用的变量或者属性需要使用 public 访问修饰符</para>
            </summary>
        </member>
        <member name="F:ES.Hotfix.AgentData._ref">
            <summary>
            代理引用
            </summary>
        </member>
        <member name="M:ES.Hotfix.AgentData.GetAgent``1">
            <summary>
            获取代理
            </summary>
            <typeparam name="T">当前对象的代理类</typeparam>
        </member>
        <member name="T:ES.Hotfix.AgentDataPivot">
            <summary>
            代理数据枢纽
            <para>所有代理的最上层数据存储都通过此类来执行存储释放</para>
            </summary>
        </member>
        <member name="F:ES.Hotfix.AgentDataPivot.objects">
            <summary>
            引用变量
            </summary>
        </member>
        <member name="F:ES.Hotfix.AgentDataPivot.structs">
            <summary>
            值变量
            </summary>
        </member>
        <member name="M:ES.Hotfix.AgentDataPivot.AddOrGetObject``1(System.String)">
            <summary>
            增加或获取对象
            </summary>
        </member>
        <member name="M:ES.Hotfix.AgentDataPivot.AddOrGetObject``1(System.String,System.Func{``0})">
            <summary>
            增加或获取对象
            </summary>
        </member>
        <member name="M:ES.Hotfix.AgentDataPivot.DeleteObject(System.String)">
            <summary>
            删除对象
            <para>有且删除则返回true</para>
            </summary>
            <param name="key">对象名称</param>
            <returns></returns>
        </member>
        <member name="M:ES.Hotfix.AgentDataPivot.AddOrGetStruct``1(System.String,``0)">
            <summary>
            增加或获取结构值
            </summary>
        </member>
        <member name="M:ES.Hotfix.AgentDataPivot.DeleteStruct(System.String)">
            <summary>
            删除结构值
            <para>有且删除则返回true</para>
            </summary>
            <param name="key">对象名称</param>
            <returns></returns>
        </member>
        <member name="T:ES.Hotfix.AgentRef">
            <summary>
            代理引用器
            </summary>
        </member>
        <member name="F:ES.Hotfix.AgentRef.isCreated">
            <summary>
            代理索引是否被创建
            </summary>
        </member>
        <member name="F:ES.Hotfix.AgentRef._agent">
            <summary>
            代理
            <para>通过代理可以执行关于类的函数</para>
            </summary>
        </member>
        <member name="T:ES.Hotfix.BaseAgent">
            <summary>
            热更代理基类
            <para>代理类型请使用Agent类继承</para>
            </summary>
        </member>
        <member name="F:ES.Hotfix.BaseAgent._self">
            <summary>
            动态数据对象
            </summary>
        </member>
        <member name="T:ES.Hotfix.HotfixMgr">
            <summary>
            ESHotfix热更模块管理器
            <para>热更程序的核心调用类，一个热更服务器可以具备多个不同Assembly</para>
            <para>在使用此类需要在数据层操作，建议不要在热更层操作</para>
            <para>如果需要主动调用热更层入口类函数，可以通过本类 agent 变量来调用</para>
            </summary>
        </member>
        <member name="P:ES.Hotfix.HotfixMgr.Instance">
            <summary>
            单例模式，启动要调用Load函数
            </summary>
        </member>
        <member name="P:ES.Hotfix.HotfixMgr.Agent">
            <summary>
            代理
            <para>上层需要使用热更层</para>
            </summary>
        </member>
        <member name="F:ES.Hotfix.HotfixMgr.assemblyLoader">
            <summary>
            程序集装载器对象
            </summary>
        </member>
        <member name="F:ES.Hotfix.HotfixMgr.agentRefs">
            <summary>
            代理引用包
            </summary>
        </member>
        <member name="F:ES.Hotfix.HotfixMgr.isLoading">
            <summary>
            是否读取
            </summary>
        </member>
        <member name="F:ES.Hotfix.HotfixMgr.tf">
            <summary>
            时间流
            </summary>
        </member>
        <member name="M:ES.Hotfix.HotfixMgr.#ctor">
            <summary>
            创建一个热更管理器
            </summary>
        </member>
        <member name="M:ES.Hotfix.HotfixMgr.Load(System.String,System.String)">
            <summary>
            载入逻辑模块
            <para>读取不能保证所有情况都是正常的，建议用try-catch捕获异常，以确保未正确替换，还能保持旧环境继续运行</para>
            </summary>
            <param name="assemblyFileName">程序集文件名(后缀小写或不写且程序集需要在运行根目录下)</param>
            <param name="classFullName">程序集下热更模块主入口类全称(即命名空间和类名)</param>
            <returns>加载是否成功</returns>
        </member>
        <member name="M:ES.Hotfix.HotfixMgr.GetVersion">
            <summary>
            获取版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Hotfix.HotfixMgr.GetAssemblyVersion">
            <summary>
            获取版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Hotfix.HotfixMgr.GetAssembly">
            <summary>
            获取程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Hotfix.HotfixMgr.Update(System.Int32)">
            <summary>
            更新
            </summary>
            <param name="deltaTime"></param>
        </member>
        <member name="M:ES.Hotfix.HotfixMgr.UpdateEnd">
            <summary>
            更新结束
            </summary>
        </member>
        <member name="T:ES.Hotfix.HotfixMgr.AssemblyLoader">
            <summary>
            程序集装载器
            </summary>
        </member>
        <member name="T:ES.Hotfix.HotfixMgr.AssemblyLoader.AssemblyProtectContext">
            <summary>
            程序集上下文
            </summary>
        </member>
        <member name="T:ES.Hotfix.StructValue">
            <summary>
            结构值保存对象
            <para>用于保存和使用结构体类型的数据</para>
            </summary>
        </member>
        <member name="F:ES.Hotfix.StructValue.Value">
            <summary>
            结构值
            </summary>
        </member>
        <member name="T:ES.Network.Http.HttpConnection">
            <summary>
            超文本访问连接对象
            <para>对象包含了此次访问的所有参数</para>
            </summary>
        </member>
        <member name="F:ES.Network.Http.HttpConnection.request">
            <summary>
            访问详细参数
            </summary>
        </member>
        <member name="F:ES.Network.Http.HttpConnection.methodType">
            <summary>
            访问方法
            </summary>
        </member>
        <member name="F:ES.Network.Http.HttpConnection.suffix">
            <summary>
            访问后缀。
            <para>链接除协议、主机和参数外的部分</para>
            </summary>
        </member>
        <member name="F:ES.Network.Http.HttpConnection.getValue">
            <summary>
            GET访问参数
            <para>post模式下也可以获得get的参数</para>
            </summary>
        </member>
        <member name="F:ES.Network.Http.HttpConnection.postValue">
            <summary>
            POST访问参数
            </summary>
        </member>
        <member name="F:ES.Network.Http.HttpConnection.postBuffer">
            <summary>
            POST访问参数 字节形式
            </summary>
        </member>
        <member name="F:ES.Network.Http.HttpConnection.response">
            <summary>
            返回对象
            <para>可以通过此对象写入返回内容</para>
            </summary>
        </member>
        <member name="F:ES.Network.Http.HttpConnection.writer">
            <summary>
            写入对象
            <para>可以通过此对象写入返回内容</para>
            </summary>
        </member>
        <member name="T:ES.Network.Http.HttpInvoke">
            <summary>
            超文本访问协议委托回调
            <para>返回状态码：200 成功 400 访问无效 404 无此页面</para>
            </summary>
        </member>
        <member name="M:ES.Network.Http.HttpInvoke.OnRequest(ES.Network.Http.HttpConnection)">
            <summary>
            访问回调
            </summary>
            <param name="conn">超文本访问连接对象</param>
        </member>
        <member name="M:ES.Network.Http.HttpInvoke.HttpException(System.Exception,ES.Network.Http.HttpConnection)">
            <summary>
            套接字异常捕获
            </summary>
            <param name="exception">异常对象</param>
            <param name="conn">原始链接</param>
        </member>
        <member name="T:ES.Network.Http.HttpMethodType">
            <summary>
            http访问方法类型
            </summary>
        </member>
        <member name="F:ES.Network.Http.HttpMethodType.UNKNOWN">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:ES.Network.Http.HttpMethodType.GET">
            <summary>
            GET请求
            </summary>
        </member>
        <member name="F:ES.Network.Http.HttpMethodType.POST">
            <summary>
            POST请求
            </summary>
        </member>
        <member name="T:ES.Network.Http.HttpRequestState">
            <summary>
            超文本协议请求状态
            </summary>
        </member>
        <member name="F:ES.Network.Http.HttpRequestState.Success">
            <summary>
            请求成功
            </summary>
        </member>
        <member name="F:ES.Network.Http.HttpRequestState.Fail">
            <summary>
            请求失败
            </summary>
        </member>
        <member name="F:ES.Network.Http.HttpRequestState.NonExistent">
            <summary>
            无法访问
            </summary>
        </member>
        <member name="T:ES.Network.Http.HttpService">
            <summary>
            HTTP访问服务
            </summary>
        </member>
        <member name="F:ES.Network.Http.HttpService.listener">
            <summary>
            Http监听器
            </summary>
        </member>
        <member name="F:ES.Network.Http.HttpService.httpInvoke">
            <summary>
            HTTP访问回调委托
            </summary>
        </member>
        <member name="F:ES.Network.Http.HttpService.defaultPrefix">
            <summary>
            默认前缀
            </summary>
        </member>
        <member name="M:ES.Network.Http.HttpService.#ctor(System.String,ES.Network.Http.Linq.HttpVisitor)">
            <summary>
            构造函数
            <para>创建一个HTTP服务</para>
            </summary>
            <param name="prefix">网址地址（端口号(包括端口)之前的部分:protocol+hostname+port）</param>
            <param name="visitor">访问器(注意：访问器需要全部初始化加载完成后才能创建http服务)</param>
        </member>
        <member name="M:ES.Network.Http.HttpService.#ctor(ES.Network.Http.HttpInvoke)">
            <summary>
            构造函数
            <para>创建一个HTTP服务</para>
            </summary>
            <param name="invoke">回调接口[不适用访问器添加]</param>
        </member>
        <member name="M:ES.Network.Http.HttpService.StartServer">
            <summary>
            开启服务器
            </summary>
        </member>
        <member name="M:ES.Network.Http.HttpService.SetHttpInvoke(ES.Network.Http.HttpInvoke)">
            <summary>
            设置HTTP委托
            </summary>
            <param name="invoke">委托接口</param>
        </member>
        <member name="M:ES.Network.Http.HttpService.GetHttpListener">
            <summary>
            获取HTTP监听对象
            </summary>
            <returns>监听对象</returns>
        </member>
        <member name="M:ES.Network.Http.HttpService.AddPrefix(System.String,System.String)">
            <summary>
            添加监听链接
            <para>第二个参数不填默认使用之前填过的第二个参数的值。</para>
            </summary>
            <param name="suffix">网址后缀</param>
            <param name="prefix">网址前缀，固定不变的部分，第一次使用必填</param>
        </member>
        <member name="M:ES.Network.Http.HttpService.AddFullPrefix(System.String)">
            <summary>
            添加完整的监听链接
            for example "http://example.com:8080/index/".
            </summary>
            <param name="prefix">完整链接</param>
        </member>
        <member name="M:ES.Network.Http.HttpService.GetContextCallBack(System.IAsyncResult)">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="M:ES.Network.Http.HttpService.CloseHttpServer">
            <summary>
            关闭HTTP服务器
            </summary>
        </member>
        <member name="T:ES.Network.Http.Linq.HttpRequest">
            <summary>
            简单HTTP请求
            <para>对http请求进行简单的访问</para>
            </summary>
        </member>
        <member name="M:ES.Network.Http.Linq.HttpRequest.Post(System.String,System.String)">
            <summary>
            Post请求
            </summary>
            <param name="url">请求地址</param>
            <param name="postDataStr">请求数据</param>
            <returns>返回数据</returns>
        </member>
        <member name="M:ES.Network.Http.Linq.HttpRequest.Get(System.String)">
            <summary>
            Get请求
            </summary>
            <param name="url">请求地址</param>
            <returns>返回数据</returns>
        </member>
        <member name="M:ES.Network.Http.Linq.HttpRequest.Post(System.String,System.String,System.Int32)">
            <summary>
            Post请求
            <para>可以在请求失败后重新尝试</para>
            </summary>
            <param name="url">请求地址</param>
            <param name="postDataStr">请求数据</param>
            <param name="retryNum">重试次数</param>
            <returns>返回数据</returns>
        </member>
        <member name="M:ES.Network.Http.Linq.HttpRequest.Get(System.String,System.Int32)">
            <summary>
            Get请求
            <para>可以在请求失败后重新尝试</para>
            </summary>
            <param name="url">请求地址</param>
            <param name="retryNum">重试次数</param>
            <returns>返回数据</returns>
        </member>
        <member name="M:ES.Network.Http.Linq.HttpRequest.HttpPost(System.String,System.String,System.Int32)">
            <summary>
            POST方法
            </summary>
            <param name="url">请求地址</param>
            <param name="postDataStr">post数据</param>
            <param name="depthNum">重试深度</param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Http.Linq.HttpRequest.HttpGet(System.String,System.Int32)">
            <summary>
            GET方法
            </summary>
            <param name="url"></param>
            <param name="depthNum">重试深度</param>
            <returns></returns>
        </member>
        <member name="T:ES.Network.Http.Linq.HttpVisitor">
            <summary>
            http访问器
            </summary>
        </member>
        <member name="T:ES.Network.Http.Linq.HttpVisitor.OnRequest">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="F:ES.Network.Http.Linq.HttpVisitor.commandList">
            <summary>
            回调委托列表
            </summary>
        </member>
        <member name="F:ES.Network.Http.Linq.HttpVisitor.allHttpListener">
            <summary>
            全局Http监听者
            </summary>
        </member>
        <member name="F:ES.Network.Http.Linq.HttpVisitor.catchReceivedException">
            <summary>
            异常回调函数地址
            </summary>
        </member>
        <member name="M:ES.Network.Http.Linq.HttpVisitor.#ctor(ES.Network.Http.Linq.IHttpVisitorException)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ES.Network.Http.Linq.HttpVisitor.Add(System.String,ES.Network.Http.Linq.HttpVisitor.OnRequest)">
            <summary>
            添加访问函数
            相同访问后缀可以被覆盖 可重复注册相同后缀访问已更新内容
            </summary>
            <param name="suffix">标记后缀</param>
            <param name="callback">访问函数</param>
        </member>
        <member name="M:ES.Network.Http.Linq.HttpVisitor.SetAllListener(ES.Network.Http.Linq.HttpVisitor.OnRequest)">
            <summary>
            设置全局监听者
            <para>虽然访问器可以监听各个想要监听的地址</para>
            <para>但是无法有一个共同回调来处理一些特殊的需求</para>
            <para>这个监听是返回所有可以接收到的请求,以此来实现添加Add无法实现的全部监听</para>
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:ES.Network.Http.Linq.HttpVisitor.HttpException(System.Exception,ES.Network.Http.HttpConnection)">
            <summary>
            异常捕捉回调
            </summary>
            <param name="exception"></param>
            <param name="conn"></param>
        </member>
        <member name="T:ES.Network.Http.Linq.IHttpVisitorException">
            <summary>
            捕捉接受异常接口
            </summary>
        </member>
        <member name="M:ES.Network.Http.Linq.IHttpVisitorException.CatchOnRequestException(ES.Network.Http.HttpConnection,System.Exception)">
            <summary>
            异常捕捉回调
            </summary>
            <param name="conn"></param>
            <param name="ex"></param>
        </member>
        <member name="T:ES.Network.HyperSocket.HyperSocket">
            <summary>
            超级套接字
            <para>使用最简单方式来建立服务器或客户端连接</para>
            <para>可以使用可靠的TCP通信、UDP[KCP]通信</para>
            <para>在连接过程中因为握手是异步处理的，所以需要在接口中才能得到正确的连接对象</para>
            <para>如果仅仅是创建了对象后就发送消息等操作是无法正确应答的</para>
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocket.HeartPongBytes">
            <summary>
            心跳pong字节
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocket.HeartPingBytes">
            <summary>
            心跳ping字节
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocket.ConnectedClientBytes">
            <summary>
            客户端连接成功字节
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocket.FirstConnectBytes">
            <summary>
            初次握手
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocket.SignSecurityBytes">
            <summary>
            签名握手
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocket.IsServerMode">
            <summary>
            是否为服务器模式
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocket.config">
            <summary>
            配置
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocket.ip">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:ES.Network.HyperSocket.HyperSocket.TcpPort">
            <summary>
            TCP模式监听端口
            </summary>
        </member>
        <member name="P:ES.Network.HyperSocket.HyperSocket.UdpPort">
            <summary>
            UDP模式监听端口
            </summary>
        </member>
        <member name="P:ES.Network.HyperSocket.HyperSocket.IsAlive">
            <summary>
            存活状态
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocket.heartCheckPeriod">
            <summary>
            心跳检测周期
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocket.ssl">
            <summary>
            SSL传输协议
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocket.#ctor(System.Boolean,System.String,System.UInt32,System.UInt32,System.UInt32,ES.Network.HyperSocket.HyperSocketConfig)">
            <summary>
            构造函数
            </summary>
            <param name="IsServerMode"></param>
            <param name="ip"></param>
            <param name="tcpPort"></param>
            <param name="udpPort"></param>
            <param name="connectMaxNum"></param>
            <param name="config"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocket.Update(System.Int32)">
            <summary>
            心跳检测
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocket.Close">
            <summary>
            关闭套接字
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocket.UpdateEnd">
            <summary>
            停止更新
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocket.connectMaxNum">
            <summary>
            最大连接数【服务器模式用】
            </summary>
        </member>
        <member name="P:ES.Network.HyperSocket.HyperSocket.tcpServer">
            <summary>
            TCP连接服务器
            </summary>
        </member>
        <member name="P:ES.Network.HyperSocket.HyperSocket.udpServer">
            <summary>
            UDP连接服务器
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocket.svrListener">
            <summary>
            服务端监听器
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocket.remoteSockets">
            <summary>
            远程连接
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocket.CreateServer(System.String,System.UInt32,System.UInt32,ES.Network.HyperSocket.IHyperSocketServerListener,ES.Network.HyperSocket.HyperSocketConfig)">
            <summary>
            创建一个服务器超级套接字
            </summary>
            <param name="ip">监听地址</param>
            <param name="port">监听端口 TCP/UDP共用相同端口</param>
            <param name="connectMaxNum">允许最大连接数 最大为65534个连接数</param>
            <param name="listener">监听器</param>
            <param name="config">配置</param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocket.CreateServer(System.String,System.UInt32,System.UInt32,System.UInt32,ES.Network.HyperSocket.IHyperSocketServerListener,ES.Network.HyperSocket.HyperSocketConfig)">
            <summary>
            创建一个服务器超级套接字
            </summary>
            <param name="ip">监听地址</param>
            <param name="tcpPort">tcp端口</param>
            <param name="udpPort">udp端口</param>
            <param name="connectMaxNum">允许最大连接数</param>
            <param name="listener">监听器</param>
            <param name="config">配置</param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocket.GenerateVerifyConnection(System.UInt16@)">
            <summary>
            生成认证通道
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocket.GetUsedSocketCount">
            <summary>
            返回使用的远程套接字数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocket.GetUnusedSocketIndex">
            <summary>
            返回未使用的远程套接字索引
            <para>0 位占用 不使用</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocket.SetSocketAtIndex(System.Int32,ES.Network.HyperSocket.RemoteHyperSocket)">
            <summary>
            设置远程套接字
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocket.GetSocketAtIndex(System.Int32)">
            <summary>
            获取远程套接字
            </summary>
            <returns></returns>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocket.tcpClient">
            <summary>
            TCP连接客户端
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocket.udpClient">
            <summary>
            UDP连接客户端
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocket.cntListener">
            <summary>
            客户端监听器
            </summary>
        </member>
        <member name="P:ES.Network.HyperSocket.HyperSocket.SessionId">
            <summary>
            客户端会话ID
            </summary>
        </member>
        <member name="P:ES.Network.HyperSocket.HyperSocket.IsValid">
            <summary>
            获取有效性
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocket.isSecurityConnected">
            <summary>
            是否安全连接 启用安全连接才可以使用
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocket.CreateClient(System.String,System.UInt32,ES.Network.HyperSocket.IHyperSocketClientListener,ES.Network.HyperSocket.HyperSocketConfig)">
            <summary>
            创建一个客户端超级套接字
            <para>客户端会尝试连接3次，如果3次都失败则触发连接失败回调</para>
            </summary>
            <param name="ip">连接地址</param>
            <param name="port">连接端口</param>
            <param name="listener">监听器</param>
            <param name="config">配置</param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocket.InitializeUdpClient(System.Byte[])">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocket.VerifyServerData(System.Byte[])">
            <summary>
            验证服务器数据
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocket.SendTcp(System.Byte[])">
            <summary>
            通过TCP发送数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocket.SendUdp(System.Byte[])">
            <summary>
            通过UDP发送数据[KCP]
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocket.SendTcp(System.String)">
            <summary>
            通过TCP发送数据
            </summary>
            <param name="dataStr"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocket.SendUdp(System.String)">
            <summary>
            通过UDP发送数据[KCP]
            </summary>
            <param name="dataStr"></param>
        </member>
        <member name="T:ES.Network.HyperSocket.HyperSocketClientModule">
            <summary>
            超级套接字客户端模块
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocketClientModule.listener">
            <summary>
            监听器
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocketClientModule.kcpHelper">
            <summary>
            kcp协议模块
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocketClientModule.heartCheckTimeOut">
            <summary>
            心跳检测超时累计
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocketClientModule.hasFirstRecvPong">
            <summary>
            第一次接受到pong消息
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocketClientModule.OnSend(System.Byte[])">
            <summary>
            kcp转发发射接口
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.HyperSocketClientModule.OnReceive(System.Byte[])">
            <summary>
            kcp转收接收接口
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:ES.Network.HyperSocket.HyperSocketConfig">
            <summary>
            超级套接字配置
            <para>创建套接字所需要的一些配置</para>
            <para>配置中括号C代表客户端配置 S代表服务端配置 C+S 代表双端皆使用的配置</para>
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocketConfig.TcpReceiveSize">
            <summary>
            [C+S] TCP协议接受数据大小
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocketConfig.UdpReceiveSize">
            <summary>
            [C+S] UDP协议接受数据大小
            <para>mtu建议设置小于默认值1380以下 否则可能导致丢包</para>
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocketConfig.HeartTimeOut">
            <summary>
            [C+S] 心跳超时时间 单位 毫秒ms
            <para>超过心跳服务器/客户端自动断开释放</para>
            <para>可以通过调整心跳检测周期来更改误差</para>
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocketConfig.HeartCheckPeriod">
            <summary>
            [S] 服务端心跳检测超时周期 单位 毫秒ms
            <para>系统会根据此时间来接受心跳检测</para>
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocketConfig.HeartSendPeriod">
            <summary>
            [C] 客户端心跳发送周期 单位 毫秒ms
            <para>系统会根据此时间来循环发送心跳用来检测</para>
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocketConfig.UseSSL">
            <summary>
            [S] 使用安全传输协议
            <para>设置为true则打开安全协议</para>
            <para>只需要服务端配置为使用状态，客户端会自动以安全传输连接</para>
            <para></para>
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocketConfig.SSLMode">
            <summary>
            [S] 使用安全传输模式
            <para>传输可以决定在安全协议下 哪种通信使用加密传输 默认TCP/UDP都是用加密传输</para>
            <para>0 TCP/UDP全使用加密传输 1 TCP使用加密传输 2 UDP使用加密传输</para>
            <para></para>
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocketConfig.kcpMode">
            <summary>
            [C+S] KCP模式
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocketConfig.KcpWinSize">
            <summary>
            [C+S] KCP窗口大小[目前输出输入窗口采用一个值]
            </summary>
        </member>
        <member name="T:ES.Network.HyperSocket.HyperSocketServerModule">
            <summary>
            超级服务器套接字模块
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.HyperSocketServerModule.listener">
            <summary>
            监听器
            </summary>
        </member>
        <member name="T:ES.Network.HyperSocket.IHyperSocketClientListener">
            <summary>
            超级套接字客户端监听器
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.IHyperSocketClientListener.OnOpen(ES.Network.HyperSocket.HyperSocket)">
            <summary>
            连接成功套接字
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.IHyperSocketClientListener.OnTcpReceive(System.Byte[],ES.Network.HyperSocket.HyperSocket)">
            <summary>
            接受数据TCP
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.IHyperSocketClientListener.OnUdpReceive(System.Byte[],ES.Network.HyperSocket.HyperSocket)">
            <summary>
            接受数据UDP
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.IHyperSocketClientListener.OnError(ES.Network.HyperSocket.HyperSocket,System.Exception)">
            <summary>
            套接字错误
            </summary>
            <param name="socket"></param>
            <param name="ex"></param>
        </member>
        <member name="T:ES.Network.HyperSocket.IHyperSocketServerListener">
            <summary>
            超级套接字服务端监听器
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.IHyperSocketServerListener.OnOpen(ES.Network.HyperSocket.RemoteHyperSocket)">
            <summary>
            连接成功套接字
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.IHyperSocketServerListener.OnTcpReceive(System.Byte[],ES.Network.HyperSocket.RemoteHyperSocket)">
            <summary>
            接受数据TCP
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.IHyperSocketServerListener.OnUdpReceive(System.Byte[],ES.Network.HyperSocket.RemoteHyperSocket)">
            <summary>
            接受数据UDP
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.IHyperSocketServerListener.OnClose(ES.Network.HyperSocket.RemoteHyperSocket)">
            <summary>
            关闭套接字
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.IHyperSocketServerListener.OnError(System.Exception)">
            <summary>
            套接字错误
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:ES.Network.HyperSocket.IKcpListener">
            <summary>
            kcp监听器
            </summary>
        </member>
        <member name="T:ES.Network.HyperSocket.KcpHelper">
            <summary>
            KCP助手
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.KcpHelper.nextUpdateTime">
            <summary>
            下次更新时间 【kcp优化方案】
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.KcpHelper.noNetDataCount">
            <summary>
            无网络数据更新次数  【kcp优化方案】
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.KcpHelper.Send(System.Byte[])">
            <summary>
            上层kcp发射
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.KcpHelper.Recv(System.Byte[])">
            <summary>
            上层kcp接收
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.KcpHelper.Output(System.Buffers.IMemoryOwner{System.Byte},System.Int32)">
            <summary>
            kcp发射
            </summary>
            <param name="buffer"></param>
            <param name="avalidLength"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.KcpHelper.CheckRecv">
            <summary>
            检查接收
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.KcpHelper.Update(System.Int32)">
            <summary>
            更新
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.KcpHelper.UpdateEnd">
            <summary>
            停止更新
            </summary>
        </member>
        <member name="T:ES.Network.HyperSocket.KcpMode">
            <summary>
            KCP模式
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.KcpMode.Normal">
            <summary>
            普通模式
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.KcpMode.Fast">
            <summary>
            快速模式
            </summary>
        </member>
        <member name="T:ES.Network.HyperSocket.RemoteHyperSocket">
            <summary>
            远程超级套接字
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.RemoteHyperSocket.kcpHelper">
            <summary>
            kcp协议模块
            </summary>
        </member>
        <member name="P:ES.Network.HyperSocket.RemoteHyperSocket.SessionId">
            <summary>
            会话ID
            </summary>
        </member>
        <member name="P:ES.Network.HyperSocket.RemoteHyperSocket.IsAlive">
            <summary>
            在线状态
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.RemoteHyperSocket.isValid">
            <summary>
            是否认证
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.RemoteHyperSocket.isSecurityConnected">
            <summary>
            是否安全连接 启用安全连接才可以使用
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.RemoteHyperSocket.Tag">
            <summary>
            与远程对象捆绑标记
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.RemoteHyperSocket.heartCheckTimeOut">
            <summary>
            心跳检测超时累计
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.RemoteHyperSocket.ssl">
            <summary>
            安全传输协议
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.RemoteHyperSocket.ip">
            <summary>
            ip地址
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.RemoteHyperSocket.tcpPort">
            <summary>
            tcp端口
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.RemoteHyperSocket.udpPort">
            <summary>
            udp端口
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.RemoteHyperSocket.SendTcp(System.Byte[])">
            <summary>
            发送数据 TCP
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.HyperSocket.RemoteHyperSocket.SendPong">
            <summary>
            发送数据 TCP
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Network.HyperSocket.RemoteHyperSocket.SendSignData(System.Byte[])">
            <summary>
            发送签名 TCP
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Network.HyperSocket.RemoteHyperSocket.SendKcp(System.Byte[])">
            <summary>
            发送数据 UDP
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.RemoteHyperSocket.SendUdp(System.Byte[])">
            <summary>
            发送数据 UDP
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.RemoteHyperSocket.SendTcp(System.String)">
            <summary>
            发送数据 TCP
            </summary>
            <param name="dataStr"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.RemoteHyperSocket.SendUdp(System.String)">
            <summary>
            发送数据 UDP
            </summary>
            <param name="dataStr"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.RemoteHyperSocket.OnReceive(System.Byte[])">
            <summary>
            内部接受函数 KCP
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.RemoteHyperSocket.OnSend(System.Byte[])">
            <summary>
            内部发送函数 KCP
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.RemoteHyperSocket.RecvData(System.Byte[])">
            <summary>
            接受原始数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ES.Network.HyperSocket.RemoteHyperSocket.CheckSameRemote(ES.Network.Sockets.Server.RemoteConnection)">
            <summary>
            检测是不是一样的远程
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Network.HyperSocket.RemoteHyperSocket.CheckSameRemote(System.Net.EndPoint)">
            <summary>
            检测是不是一样的远程
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Network.HyperSocket.RemoteHyperSocket.GetRemoteIp">
            <summary>
            获取远程IP
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.RemoteHyperSocket.GetRemoteTcpPort">
            <summary>
            获取TCP远程端口
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.RemoteHyperSocket.GetRemoteUdpPort">
            <summary>
            获取UDP远程端口
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.RemoteHyperSocket.CloseSocket">
            <summary>
            关闭套接字
            </summary>
        </member>
        <member name="T:ES.Network.HyperSocket.SSL">
            <summary>
            安全协议类
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.SSL.rsa">
            <summary>
            RSA对象
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.SSL.aes">
            <summary>
            AES对象
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.SSL.RSAPublicKey">
            <summary>
            RSA加密公钥
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.SSL.RSAPrivateKey">
            <summary>
            RSA加密私钥
            </summary>
        </member>
        <member name="F:ES.Network.HyperSocket.SSL.AESKey">
            <summary>
            AES加密密钥
            </summary>
        </member>
        <member name="T:ES.Network.HyperSocket.SSL.SSLMode">
            <summary>
            安全协议模式
            </summary>
        </member>
        <member name="M:ES.Network.HyperSocket.SSL.AESEncrypt(System.Byte[])">
            <summary>
             AES 加密
            </summary>
            <param name="encryptArray">明文（待加密）</param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.HyperSocket.SSL.AESDecrypt(System.Byte[])">
            <summary>
             AES 解密
            </summary>
            <param name="decryptArray">密文（待解密）</param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.HyperSocket.SSL.RSAEncrypt(System.Byte[])">
            <summary>
            RSA公钥文件加密纯文本。
            </summary>
            <param name="encryptArray">要加密的文本</param>
            <returns>表示加密数据的64位编码字符串.</returns>
        </member>
        <member name="M:ES.Network.HyperSocket.SSL.RSADecrypt(System.Byte[])">
            <summary>
            RSA解密
            </summary>
            <param name="decryptArray">加密的密文</param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.HyperSocket.SSL.RSASignData(System.Byte[])">
            <summary>
            RSA公钥文件签名纯文本。
            </summary>
            <param name="strArray">要签名的文本</param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.HyperSocket.SSL.RSAVerifyData(System.Byte[],System.Byte[])">
            <summary>
            RSA验签
            </summary>
            <param name="strArray">要签名的密文</param>
            <param name="signArray">签名</param>
            <returns></returns>
        </member>
        <member name="T:ES.Network.Sockets.AddressFamily">
            <summary>
            地址簇
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.AddressFamily.InterNetwork">
            <summary>
            Address for IP version 4.
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.AddressFamily.InterNetworkV6">
            <summary>
            Address for IP version 6.
            </summary>
        </member>
        <member name="T:ES.Network.Sockets.Client.BaseClientSocket">
            <summary>
            ESF客户端套接字 抽象基础类
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Client.BaseClientSocket.clientSocket">
            <summary>
            远程客户端套接字
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Client.BaseClientSocket.numMaxBufferSize">
            <summary>
            接受缓存最大长度
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Client.BaseClientSocket.buffer">
            <summary>
            缓存
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Client.BaseClientSocket.Target">
            <summary>
            用户绑定对象
            </summary>
        </member>
        <member name="P:ES.Network.Sockets.Client.BaseClientSocket.rBuffer">
            <summary>
            解析缓存
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Client.BaseClientSocket.socketInvoke">
            <summary>
            消息委托
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Client.BaseClientSocket.isRecving">
            <summary>
            接受状态
            </summary>
        </member>
        <member name="P:ES.Network.Sockets.Client.BaseClientSocket.hasConnected">
            <summary>
            连接状态
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Client.BaseClientSocket.sendEventArgs">
            <summary>
            发送事件参数
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Client.BaseClientSocket.readWriteEventArg">
            <summary>
            读写参数
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Client.BaseClientSocket.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="numMaxBufferSize"></param>
        </member>
        <member name="M:ES.Network.Sockets.Client.BaseClientSocket.#ctor(ES.Network.Sockets.Socket,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="esfSocket">ESFSocket对象</param>
            <param name="numMaxBufferSize">接受数据最大容量</param>
        </member>
        <member name="M:ES.Network.Sockets.Client.BaseClientSocket.SendBuffer(System.UInt16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送数据
            <para>返回 0 为成功 -1 异常</para>
            </summary>
            <param name="sessionId">会话ID</param>
            <param name="buffer">数据</param>
            <param name="offset">偏移</param>
            <param name="count">数量</param>
            <returns>0 为成功 -1 异常</returns>
        </member>
        <member name="M:ES.Network.Sockets.Client.BaseClientSocket.SendBufferTo(System.UInt16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送数据 报文
            </summary>
            <param name="sessionId">会话ID</param>
            <param name="buffer">数据</param>
            <param name="offset">偏移</param>
            <param name="count">数量</param>
        </member>
        <member name="M:ES.Network.Sockets.Client.BaseClientSocket.IO_Completed(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            IO完成端口
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ES.Network.Sockets.Client.BaseClientSocket.ProcessSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            线程发送
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Client.BaseClientSocket.BeginReceived">
            <summary>
            开始监听
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Client.BaseClientSocket.BeginReceivedFrom">
            <summary>
            开始监听 udp
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Client.BaseClientSocket.ReceiveCallback(System.IAsyncResult)">
            <summary>
            接受线程函数 tcp
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Client.BaseClientSocket.ReceiveFromCallback(System.IAsyncResult)">
            <summary>
            接受线程函数 udp
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Client.BaseClientSocket.TriggerSocketInvoke">
            <summary>
            触发回调委托
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Client.BaseClientSocket.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="T:ES.Network.Sockets.Client.ClientSocket">
            <summary>
            ESF客户端套接字（异步接受）
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Client.ClientSocket.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            构造函数
            <para>创建一个异步socket</para>
            </summary>
            <param name="ip">ip地址</param>
            <param name="port">端口</param>
            <param name="numMaxBufferSize">接受数据大小[UDP模式以传送理论最大值/TCP模式以传送最佳合适值]</param>
        </member>
        <member name="M:ES.Network.Sockets.Client.ClientSocket.#ctor(ES.Network.Sockets.Socket,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="esfSocket">ESFSocket对象</param>
            <param name="numMaxBufferSize">接受数据大小[UDP模式以传送理论最大值/TCP模式以传送最佳合适值]</param>
        </member>
        <member name="M:ES.Network.Sockets.Client.ClientSocket.Init(ES.Network.Sockets.AddressFamily,ES.Network.Sockets.SocketType,ES.Network.Sockets.ProtocolType,ES.Network.Sockets.Client.ISocketInvoke)">
            <summary>
            初始化套接字
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Client.ClientSocket.Send(System.Byte[])">
            <summary>
            发送数据
            </summary>
            <param name="buffer">数据</param>
        </member>
        <member name="M:ES.Network.Sockets.Client.ClientSocket.Send(System.String)">
            <summary>
            发送数据(utf8字符串数据)
            </summary>
            <param name="utf8str">数据</param>
        </member>
        <member name="M:ES.Network.Sockets.Client.ClientSocket.Send(System.UInt16,System.Byte[])">
            <summary>
            发送数据
            </summary>
            <param name="sessionId">会话ID</param>
            <param name="buffer">数据</param>
        </member>
        <member name="M:ES.Network.Sockets.Client.ClientSocket.Send(System.UInt16,System.String)">
            <summary>
            发送数据(utf8字符串数据)
            </summary>
            <param name="sessionId">会话ID</param>
            <param name="utf8str">数据</param>
        </member>
        <member name="M:ES.Network.Sockets.Client.ClientSocket.Send(System.UInt16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="sessionId">会话ID</param>
            <param name="buffer">数据</param>
            <param name="offset">偏移</param>
            <param name="count">数量</param>
        </member>
        <member name="M:ES.Network.Sockets.Client.ClientSocket.ReceiveCallback(System.IAsyncResult)">
            <summary>
            接受线程函数(异步)
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Client.ClientSocket.ReceiveFromCallback(System.IAsyncResult)">
            <summary>
            接受线程函数(异步)
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Client.ClientSocket.TriggerSocketInvoke">
            <summary>
            触发回调委托
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Client.ClientSocket.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="T:ES.Network.Sockets.Client.ISocketInvoke">
            <summary>
            套接字委托接口回调
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Client.ISocketInvoke.ReceivedCompleted(ES.Network.Sockets.Client.SocketMsg)">
            <summary>
            完成接受回调
            </summary>
            <param name="msg">数据信息</param>
        </member>
        <member name="M:ES.Network.Sockets.Client.ISocketInvoke.OnSocketException(System.Exception)">
            <summary>
            套接字异常捕获
            </summary>
            <param name="exception">异常对象</param>
        </member>
        <member name="T:ES.Network.Sockets.Client.Linq.ISocketVisitorException">
            <summary>
            捕捉接受异常接口
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Client.Linq.ISocketVisitorException.OnReceivedException(ES.Network.Sockets.Client.SocketMsg,System.Exception)">
            <summary>
            异常捕捉回调
            </summary>
            <param name="msg"></param>
            <param name="ex"></param>
        </member>
        <member name="T:ES.Network.Sockets.Client.Linq.SocketVisitor">
            <summary>
            socket访问器
            <para>异步通信下服务端和客户端均可使用此方案解决</para>
            </summary>
        </member>
        <member name="T:ES.Network.Sockets.Client.Linq.SocketVisitor.ReceivedCompleted">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Client.Linq.SocketVisitor.commandList">
            <summary>
            回调委托列表
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Client.Linq.SocketVisitor.catchReceivedException">
            <summary>
            异常回调函数地址
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Client.Linq.SocketVisitor.#ctor(ES.Network.Sockets.Client.Linq.ISocketVisitorException)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Client.Linq.SocketVisitor.Add(System.Byte,System.Byte,ES.Network.Sockets.Client.Linq.SocketVisitor.ReceivedCompleted)">
            <summary>
            添加访问函数
            </summary>
            <param name="main">主指令</param>
            <param name="second">副指令</param>
            <param name="callback">访问函数</param>
        </member>
        <member name="M:ES.Network.Sockets.Client.Linq.SocketVisitor.ES#Network#Sockets#Client#ISocketInvoke#ReceivedCompleted(ES.Network.Sockets.Client.SocketMsg)">
            <summary>
            接受完成回调
            </summary>
            <param name="msg">数据信息</param>
        </member>
        <member name="M:ES.Network.Sockets.Client.Linq.SocketVisitor.OnSocketException(System.Exception)">
            <summary>
            套接字异常
            </summary>
            <param name="exception"></param>
        </member>
        <member name="T:ES.Network.Sockets.Client.SocketMsg">
            <summary>
            套接字信息体
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Client.SocketMsg.sessionId">
            <summary>
            会话ID
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Client.SocketMsg.data">
            <summary>
            网络数据
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Client.SocketMsg.sender">
            <summary>
            发送者
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Client.SocketMsg.#ctor(System.UInt16,System.Byte[],ES.Network.Sockets.Client.ClientSocket)">
            <summary>
            构造
            </summary>
            <param name="sessionId"></param>
            <param name="data"></param>
            <param name="sender"></param>
        </member>
        <member name="M:ES.Network.Sockets.Client.SocketMsg.AsJObject">
            <summary>
            网络数据转为json对象
            <para>默认编码UTF-8 如错误解析则抛出异常</para>
            </summary>
            <returns>json对象</returns>
        </member>
        <member name="M:ES.Network.Sockets.Client.SocketMsg.AsArray">
            <summary>
            网络数据转为json数组
            <para>默认编码UTF-8 如错误解析则抛出异常</para>
            </summary>
            <returns>json数组</returns>
        </member>
        <member name="T:ES.Network.Sockets.MySocketAsyncEventArgs">
            <summary>
            继承套接字
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.MySocketAsyncEventArgs.ResetUsedState">
            <summary>
            重置使用状态
            </summary>
        </member>
        <member name="T:ES.Network.Sockets.ProtocolType">
            <summary>
            协议类型
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.ProtocolType.Tcp">
            <summary>
            Transmission Control Protocol.
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.ProtocolType.Udp">
            <summary>
            User Datagram Protocol.
            </summary>
        </member>
        <member name="T:ES.Network.Sockets.Server.BufferManager">
            <summary>
            数据管理器
            </summary>
        </member>
        <member name="T:ES.Network.Sockets.Server.IRemoteSocketInvoke">
            <summary>
            远程套接字委托接口回调
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.IRemoteSocketInvoke.ReceivedCompleted(ES.Network.Sockets.Server.RemoteSocketMsg)">
            <summary>
            完成接受回调
            </summary>
            <param name="msg">数据信息体</param>
        </member>
        <member name="M:ES.Network.Sockets.Server.IRemoteSocketInvoke.OnSocketException(System.Exception)">
            <summary>
            套接字异常捕获
            </summary>
            <param name="exception">异常对象</param>
        </member>
        <member name="T:ES.Network.Sockets.Server.Linq.IRemoteSocketVisitorException">
            <summary>
            捕捉接受异常接口
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.Linq.IRemoteSocketVisitorException.OnReceivedException(ES.Network.Sockets.Server.RemoteSocketMsg,System.Exception)">
            <summary>
            异常捕捉回调
            </summary>
            <param name="msg"></param>
            <param name="ex"></param>
        </member>
        <member name="T:ES.Network.Sockets.Server.Linq.MonitorSocketStatusTask">
            <summary>
            监控套接字状态任务 (服务器用)
            <para>监控原理：只要处于队列中的用户票据都会每秒递增1，达到设定超时秒数后移除。（只要收到任何对方消息都会重置该事件）</para>
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.Linq.MonitorSocketStatusTask.timeoutSecond">
            <summary>
            超时时间。 单位秒，只有大于0才生效
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.Linq.MonitorSocketStatusTask.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="timeout">(超时)断线时间，单位:s</param>
        </member>
        <member name="M:ES.Network.Sockets.Server.Linq.MonitorSocketStatusTask.SetTimeout(System.Int32)">
            <summary>
            设置超时时间
            </summary>
            <param name="timeout">(超时)断线时间，单位:s 小于0则不生效</param>
        </member>
        <member name="M:ES.Network.Sockets.Server.Linq.MonitorSocketStatusTask.PushCheck(ES.Network.Sockets.Server.RemoteConnection)">
            <summary>
            推送检测
            </summary>
            <param name="token">需要检测的客户端票据</param>
        </member>
        <member name="M:ES.Network.Sockets.Server.Linq.MonitorSocketStatusTask.TimeoutTaskCallback">
            <summary>
            回调处理
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.Linq.MonitorSocketStatusTask.Close">
            <summary>
            关闭任务
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.Linq.MonitorSocketStatusTask.Update(System.Int32)">
            <summary>
            系统调用
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:ES.Network.Sockets.Server.Linq.MonitorSocketStatusTask.UpdateEnd">
            <summary>
            停止更新
            </summary>
        </member>
        <member name="T:ES.Network.Sockets.Server.Linq.RemoteSocketVisitor">
            <summary>
            远程socket访问器
            <para>异步通信下服务端和客户端均可使用此方案解决</para>
            </summary>
        </member>
        <member name="T:ES.Network.Sockets.Server.Linq.RemoteSocketVisitor.ReceivedCompleted">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.Linq.RemoteSocketVisitor.commandList">
            <summary>
            回调委托列表
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.Linq.RemoteSocketVisitor.catchReceivedException">
            <summary>
            异常回调函数地址
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.Linq.RemoteSocketVisitor.#ctor(ES.Network.Sockets.Server.Linq.IRemoteSocketVisitorException)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.Linq.RemoteSocketVisitor.Add(System.Byte,System.Byte,ES.Network.Sockets.Server.Linq.RemoteSocketVisitor.ReceivedCompleted)">
            <summary>
            添加访问函数
            </summary>
            <param name="main">主指令</param>
            <param name="second">副指令</param>
            <param name="callback">访问函数</param>
        </member>
        <member name="M:ES.Network.Sockets.Server.Linq.RemoteSocketVisitor.ES#Network#Sockets#Server#IRemoteSocketInvoke#ReceivedCompleted(ES.Network.Sockets.Server.RemoteSocketMsg)">
            <summary>
            接受完成回调
            </summary>
            <param name="msg">数据信息</param>
        </member>
        <member name="M:ES.Network.Sockets.Server.Linq.RemoteSocketVisitor.OnSocketException(System.Exception)">
            <summary>
            套接字异常
            </summary>
            <param name="exception"></param>
        </member>
        <member name="T:ES.Network.Sockets.Server.RemoteConnection">
            <summary>
            远程客户端连接
            <para>TCP模式下 主动推送数据直接保存</para>
            <para>UDP模式下 主动推送需要调用CloneUDPConnection()保存使用</para>
            </summary>
        </member>
        <member name="P:ES.Network.Sockets.Server.RemoteConnection.socketSvrMgr">
            <summary>
            连接服务控制对象
            </summary>
        </member>
        <member name="P:ES.Network.Sockets.Server.RemoteConnection.rBuffer">
            <summary>
            数据包缓存
            </summary>
        </member>
        <member name="P:ES.Network.Sockets.Server.RemoteConnection.isAlive">
            <summary>
            存活情况
            </summary>
        </member>
        <member name="P:ES.Network.Sockets.Server.RemoteConnection.hasConnected">
            <summary>
            连接状态
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.RemoteConnection.timeoutCount">
            <summary>
            时间计时器
            </summary>
        </member>
        <member name="P:ES.Network.Sockets.Server.RemoteConnection.socketInvoke">
            <summary>
            异步接受信息委托回调
            </summary>
        </member>
        <member name="P:ES.Network.Sockets.Server.RemoteConnection.socket">
            <summary>
            ESF.Socket
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.RemoteConnection.Target">
            <summary>
            用户绑定对象(TCP模式)
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.RemoteConnection.hySocket">
            <summary>
            超级远程连接
            </summary>
        </member>
        <member name="P:ES.Network.Sockets.Server.RemoteConnection.receiveEventArgs">
            <summary>
            接受事件参数
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.RemoteConnection.sendEventArgs">
            <summary>
            发送事件参数
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.RemoteConnection.readWriteEventArg">
            <summary>
            服务分配的系统接收参数
            </summary>
        </member>
        <member name="P:ES.Network.Sockets.Server.RemoteConnection.connectDateTime">
            <summary>
            连接时间
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.RemoteConnection.#ctor(ES.Network.Sockets.Server.ServerSocket,ES.Network.Sockets.Server.IRemoteSocketInvoke)">
            <summary>
            构造函数 tcp
            <para>正式调用还需执行Init()</para>
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.RemoteConnection.#ctor(System.Net.EndPoint,ES.Network.Sockets.Server.ServerSocket)">
            <summary>
            构造函数 udp
            <para>正式调用还需执行Init()</para>
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.RemoteConnection.Init(ES.Network.Sockets.Socket,System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.RemoteConnection.Send(System.Byte[])">
            <summary>
            发送数据
            </summary>
            <param name="buffer">数据</param>
        </member>
        <member name="M:ES.Network.Sockets.Server.RemoteConnection.Send(System.String)">
            <summary>
            发送数据(utf8字符串数据)
            </summary>
            <param name="utf8str">数据</param>
        </member>
        <member name="M:ES.Network.Sockets.Server.RemoteConnection.Send(System.UInt16,System.Byte[])">
            <summary>
            发送数据
            </summary>
            <param name="sessionId">会话ID</param>
            <param name="buffer">数据</param>
        </member>
        <member name="M:ES.Network.Sockets.Server.RemoteConnection.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="buffer">数据</param>
            <param name="offset">数据偏移</param>
            <param name="count">数据大小</param>
        </member>
        <member name="M:ES.Network.Sockets.Server.RemoteConnection.Send(System.UInt16,System.String)">
            <summary>
            发送数据(utf8字符串数据)
            </summary>
            <param name="sessionId">会话ID</param>
            <param name="utf8str">数据</param>
        </member>
        <member name="M:ES.Network.Sockets.Server.RemoteConnection.Send(System.UInt16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="sessionId">会话ID</param>
            <param name="buffer">数据</param>
            <param name="offset">数据偏移</param>
            <param name="count">数据大小</param>
        </member>
        <member name="M:ES.Network.Sockets.Server.RemoteConnection.TriggerSocketInvoke">
            <summary>
            触发回调委托
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.RemoteConnection.Destroy">
            <summary>
            销毁当前对象并且从服务器列表中删除
            </summary>
        </member>
        <member name="T:ES.Network.Sockets.Server.RemoteSocketMsg">
            <summary>
            远程套接字信息体
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.RemoteSocketMsg.sessionId">
            <summary>
            会话ID
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.RemoteSocketMsg.data">
            <summary>
            网络数据
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.RemoteSocketMsg.sender">
            <summary>
            发送者
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.RemoteSocketMsg.remoteEndPoint">
            <summary>
            发送远程终端
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.RemoteSocketMsg.#ctor(System.UInt16,System.Byte[],ES.Network.Sockets.Server.RemoteConnection)">
            <summary>
            构造
            </summary>
            <param name="sessionId"></param>
            <param name="data"></param>
            <param name="sender"></param>
        </member>
        <member name="M:ES.Network.Sockets.Server.RemoteSocketMsg.#ctor(System.UInt16,System.Byte[],System.Net.EndPoint)">
            <summary>
            构造
            </summary>
            <param name="sessionId"></param>
            <param name="data"></param>
            <param name="remoteEndPoint"></param>
        </member>
        <member name="M:ES.Network.Sockets.Server.RemoteSocketMsg.AsJObject">
            <summary>
            网络数据转为json对象
            <para>默认编码UTF-8 如错误解析则抛出异常</para>
            </summary>
            <returns>json对象</returns>
        </member>
        <member name="M:ES.Network.Sockets.Server.RemoteSocketMsg.AsJArray">
            <summary>
            网络数据转为json数组
            <para>默认编码UTF-8 如错误解析则抛出异常</para>
            </summary>
            <returns>json数组</returns>
        </member>
        <member name="T:ES.Network.Sockets.Server.ServerSocket">
            <summary>
            ESF套接字服务端管理
            <para>通过新建ESFSocket对象 装载到此类中即可生成一个服务器对象</para>
            <para>UDP访问仅仅通过本类不能监控其断开状态，需要自主定制</para>
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.ServerSocket.remoteTCPClients">
            <summary>
            客户端连接合集 tcp
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.ServerSocket.numConnections">
            <summary>
            客户端连接设计为同时处理的最大连接数
            the maximum number of connections the sample is designed to handle simultaneously 
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.ServerSocket.receiveBufferSize">
            <summary>
            用于每个套接字I/O操作的缓冲区大小
            buffer size to use for each socket I/O operation 
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.ServerSocket.bufferManager">
            <summary>
            表示所有套接字操作的一组可重用的大缓冲区
            represents a large reusable set of buffers for all socket operations
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.ServerSocket.opsToPreAlloc">
            <summary>
            读、写（不为接受分配缓冲区空间）
            read, write (don't alloc buffer space for accepts)
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.ServerSocket.serverSocket">
            <summary>
            用于侦听传入连接请求的ESF套接字
            the socket used to listen for incoming connection requests
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.ServerSocket.readWritePool">
            <summary>
            用于写入、读取和接受套接字操作的可重用SocketAsyncEventArgs对象池
            pool of reusable System.Net.Sockets.SocketAsyncEventArgs objects for write, read and accept socket operations
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.ServerSocket.numConnectedSockets">
            <summary>
            服务器接收的总字节数计数器
            counter of the total # bytes received by the server
            </summary>
            private int totalBytesRead;
            <summary>
            连接到服务器的客户端总数
            the total number of clients connected to the server
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.ServerSocket.maxNumberAcceptedClients">
            <summary>
            最大容许客户端数量
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.ServerSocket.socketInvoke">
            <summary>
            消息委托
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.ServerSocket.socketStatusListener">
            <summary>
            套接字状态监听回调器
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Server.ServerSocket.monitorSocketStatusTask">
            <summary>
            监听套接字状态任务
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            新建套接字服务管理对象
            </summary>
            <param name="ip">IP地址</param>
            <param name="port">端口</param>
            <param name="numConnections">可同时连接客户端数</param>
            <param name="receiveBufferSize">接受数据大小[UDP模式以传送理论最大值/TCP模式以传送最佳合适值]</param>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.#ctor(ES.Network.Sockets.Socket,System.Int32,System.Int32)">
            <summary>
            新建套接字服务管理对象
            </summary>
            <param name="esfSocket">ESF套接字</param>
            <param name="numConnections">可同时连接客户端数</param>
            <param name="receiveBufferSize">接受数据大小[UDP模式以传送理论最大值/TCP模式以传送最佳合适值]</param>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.Init(ES.Network.Sockets.AddressFamily,ES.Network.Sockets.SocketType,ES.Network.Sockets.ProtocolType,System.Int32,ES.Network.Sockets.Server.IRemoteSocketInvoke)">
            <summary>
            初始化套接字服务管理
            </summary>
            <param name="addressFamily">地址协议簇 [ipv4或ipv6]</param>
            <param name="socketType">套接字类型 [stream或Dgram]</param>
            <param name="protocolType">协议类型 [tcp或者udp]</param>
            <param name="backlog">同时监听接入连接数 默认为0, 即 并发可监听数</param>
            <param name="socketInvoke">委托回调</param>
            <returns>连接是否成功</returns>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.StartServer">
            <summary>
            启动服务
            <para>现在不需要手动处理了，Init里直接执行</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.GetClientCount">
            <summary>
            返回客户端连接数
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.CheckExistClient(ES.Network.Sockets.Server.RemoteConnection)">
            <summary>
            查询是否还存在指定客户端
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.RemoveExistClient(ES.Network.Sockets.Server.RemoteConnection)">
            <summary>
            移除指定客户端
            </summary>
            <param name="client">指定客户端对象</param>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.SetSocketEvent(ES.Network.Sockets.Server.SocketStatusListener)">
            <summary>
            设置套接字事件监听
            <para>单独设置监听 有可能无法检测到断开连接情况</para>
            <para>TCP可以使用监控任务 UDP无法通过监控判断其断开情况</para>
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.SetSocketEvent(ES.Network.Sockets.Server.SocketStatusListener,ES.Network.Sockets.Server.Linq.MonitorSocketStatusTask)">
            <summary>
            设置套接字事件监听且可定义监控任务
            <para>UDP无需使用方法，因为无效</para>
            </summary>
            <param name="listener"></param>
            <param name="task"></param>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.StartAccept(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            开始接受新客户端连接
            <para>IOCP模型构建</para>
            </summary>
            <param name="acceptEventArg">异步事件参数</param>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.AcceptEventArg_Completed(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            接受客户端连接事件完成端口回调
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.ProcessAccept(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            处理新客户端连接
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            接受数据进程
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.StartAcceptReceiveFrom">
            <summary>
            开始接受新客户端连接
            <para>IOCP模型构建</para>
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.ProcessReceiveFrom(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            接受数据进程 udp
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.IO_Completed(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            IO完成端口
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.ProcessSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            线程发送
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.SendAsyncEvent(ES.Network.Sockets.Server.RemoteConnection,System.UInt16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="client"></param>
            <param name="sessionId">会话ID</param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Sockets.Server.ServerSocket.CloseServer">
            <summary>
            关闭服务
            </summary>
        </member>
        <member name="T:ES.Network.Sockets.Server.SocketStatusListener">
            <summary>
            套接字状态监听回调
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.SocketStatusListener.OnConnect(ES.Network.Sockets.Server.RemoteConnection)">
            <summary>
            新连接回调
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Server.SocketStatusListener.OnClose(ES.Network.Sockets.Server.RemoteConnection)">
            <summary>
            连接关闭回调
            </summary>
        </member>
        <member name="T:ES.Network.Sockets.Socket">
            <summary>
            ESF框架Socket模型
            <para>此模型只能一次性使用 [无法重复连接]</para>
            <para>不建议直接使用此类创建连接操作</para>
            </summary>
        </member>
        <member name="P:ES.Network.Sockets.Socket.ip">
            <summary>
            ip地址
            </summary>
        </member>
        <member name="P:ES.Network.Sockets.Socket.port">
            <summary>
            端口
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Socket.address">
            <summary>
            ip地址对象
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Socket.endPoint">
            <summary>
            ip地址解析终端
            </summary>
        </member>
        <member name="P:ES.Network.Sockets.Socket.addressFamily">
            <summary>
            地址簇
            </summary>
        </member>
        <member name="P:ES.Network.Sockets.Socket.socketType">
            <summary>
            套接字类型
            </summary>
        </member>
        <member name="P:ES.Network.Sockets.Socket.protocolType">
            <summary>
            协议类型
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.Socket.socket">
            <summary>
            套接字连接
            </summary>
        </member>
        <member name="P:ES.Network.Sockets.Socket.isConnected">
            <summary>
            连接状态
            <para>只要使用类中连接函数且绑定或连接成功，此变量就会为true</para>
            </summary>
        </member>
        <member name="P:ES.Network.Sockets.Socket.isClosed">
            <summary>
            关闭状态
            <para>只要调用过类中Close函数或者心跳检测断开连接此变量就会为true</para>
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Socket.#ctor">
            <summary>
            私有构造
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Socket.#ctor(System.String,System.Int32)">
            <summary>
            创建一个ESFSocket对象
            </summary>
            <param name="ip">ip地址</param>
            <param name="port">端口号</param>
        </member>
        <member name="M:ES.Network.Sockets.Socket.ConnectAsServer(ES.Network.Sockets.AddressFamily,ES.Network.Sockets.SocketType,ES.Network.Sockets.ProtocolType,System.Int32)">
            <summary>
            作为服务器连接
            </summary>
            <param name="addressFamily">地址协议簇 [ipv4或ipv6]</param>
            <param name="socketType">套接字类型 [stream或Dgram]</param>
            <param name="protocolType">协议类型 [tcp或者udp]</param>
            <param name="backlog">同时监听接入连接数 默认为0</param>
            <returns>连接是否成功</returns>
        </member>
        <member name="M:ES.Network.Sockets.Socket.Connect(ES.Network.Sockets.AddressFamily,ES.Network.Sockets.SocketType,ES.Network.Sockets.ProtocolType)">
            <summary>
            连接服务器端
            <para>作为客户端连接</para>
            </summary>
            <param name="addressFamily">地址协议簇 [ipv4或ipv6]</param>
            <param name="socketType">套接字类型 [stream或Dgram]</param>
            <param name="protocolType">协议类型 [tcp或者udp]</param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Sockets.Socket.GetSocket">
            <summary>
            获取原生套接字对象
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Socket.FillAsClient(System.Net.Sockets.Socket)">
            <summary>
            静态函数：作为客户端填充函数并且返回对象(服务器用) tcp
            <para>默认获得一个已连接的socket，将其载入ESFSocket中便于统一管理</para>
            </summary>
            <param name="s">已连接的套接字</param>
            <returns>返回一个ESFSocket</returns>
        </member>
        <member name="M:ES.Network.Sockets.Socket.FillAsClient(System.Net.EndPoint)">
            <summary>
            静态函数：作为客户端填充函数并且返回对象(服务器用) udp
            <para>默认获得一个已连接的socket，将其载入ESFSocket中便于统一管理</para>
            </summary>
            <param name="endPoint">链接终端</param>
            <returns>返回一个ESFSocket</returns>
        </member>
        <member name="M:ES.Network.Sockets.Socket.UpdateEndPoint(System.Net.EndPoint)">
            <summary>
            更新EndPoint信息
            </summary>
            <param name="endPoint">链接终端</param>
        </member>
        <member name="M:ES.Network.Sockets.Socket.Close">
            <summary>
            关闭ESFSocket
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.Socket.Send(System.Byte[])">
            <summary>
            TCP发送
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)">
            <summary>
            UDP发送
            </summary>
            <param name="buffer"></param>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            TCP异步发送
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            UDP异步发送
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)">
            <summary>
            TCP开始接受新连接
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Sockets.Socket.EndAccept(System.Byte[]@,System.IAsyncResult)">
            <summary>
            TCP结束接受新连接
            </summary>
            <param name="buffer"></param>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            TCP开始接受数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="socketFlags"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Sockets.Socket.EndReceive(System.IAsyncResult)">
            <summary>
            TCP结束接受数据
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)">
            <summary>
            UDP开始接受数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="socketFlags"></param>
            <param name="endPoint"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)">
            <summary>
            UDP结束接受数据
            </summary>
            <param name="asyncResult"></param>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            TCP异步接受新连接
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            TCP异步接受数据
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            UDP异步接受数据
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            关闭连接
            </summary>
            <param name="how"></param>
        </member>
        <member name="T:ES.Network.Sockets.SocketAsyncEventArgsEx">
            <summary>
            套接字异步事件参数拓展
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.SocketAsyncEventArgsEx.argsList">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.SocketAsyncEventArgsEx.m_lock">
            <summary>
            锁
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.SocketAsyncEventArgsEx.index">
            <summary>
            参数索引
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.SocketAsyncEventArgsEx.#ctor(System.Object,System.Net.EndPoint,System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs})">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.SocketAsyncEventArgsEx.#ctor(System.Object,ES.Network.Sockets.Socket,System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs})">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.SocketAsyncEventArgsEx.ExpandNewArgs">
            <summary>
            扩容
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.SocketAsyncEventArgsEx.Pop">
            <summary>
            取出值
            </summary>
            <returns></returns>
        </member>
        <member name="M:ES.Network.Sockets.SocketAsyncEventArgsEx.Destroy">
            <summary>
            销毁
            </summary>
        </member>
        <member name="T:ES.Network.Sockets.SocketType">
            <summary>
            套接字类型
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.SocketType.Stream">
            <summary>
            Supports reliable, two-way, connection-based byte streams without the duplication
            of data and without preservation of boundaries. A System.Net.Sockets.Socket of
            this type communicates with a single peer and requires a remote host connection
            before communication can begin. System.Net.Sockets.SocketType.Stream uses the
            Transmission Control Protocol (ProtocolType.System.Net.Sockets.ProtocolType.Tcp)
            and the AddressFamily.System.Net.Sockets.AddressFamily.InterNetwork address family.
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.SocketType.Dgram">
            <summary>
            Supports datagrams, which are connectionless, unreliable messages of a fixed
            (typically small) maximum length. Messages might be lost or duplicated and might
            arrive out of order. A System.Net.Sockets.Socket of type System.Net.Sockets.SocketType.Dgram
            requires no connection prior to sending and receiving data, and can communicate
            with multiple peers. System.Net.Sockets.SocketType.Dgram uses the Datagram Protocol
            (ProtocolType.System.Net.Sockets.ProtocolType.Udp) and the AddressFamily.System.Net.Sockets.AddressFamily.InterNetwork
            address family.
            </summary>
        </member>
        <member name="T:ES.Network.Sockets.SweetStream">
            <summary>
            Sweet Stream 
            <para>糖流体拼装协议</para>
            <para>8~10位包头</para>
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.SweetStream.OUTSOURCING_SIZE">
            <summary>
            包体 8~10大小
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.SweetStream.decodeBuffer">
            <summary>
            原始数据 解析缓冲区
            </summary>
        </member>
        <member name="F:ES.Network.Sockets.SweetStream.originalQueue">
            <summary>
            原始数据队列
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.SweetStream.Decode(System.Byte[])">
            <summary>
            放入数据进行等待解析
            </summary>
            <param name="rbuffer">接受到的数据流</param>
        </member>
        <member name="M:ES.Network.Sockets.SweetStream.ExtractData(System.Byte[],System.Int32,System.Int32@,System.Boolean@)">
            <summary>
            检查头部信息是否正确
            </summary>
        </member>
        <member name="M:ES.Network.Sockets.SweetStream.Encode(System.Byte[])">
            <summary>
            数据打包
            <para>用于发送字节流</para>
            </summary>
            <param name="sbuffer">发送的数据流</param>
        </member>
        <member name="M:ES.Network.Sockets.SweetStream.TakeStreamBuffer">
            <summary>
            提取并删除最先进入的数据
            </summary>
        </member>
        <member name="T:ES.Network.Websocket.IWebsocketInvoke">
            <summary>
            websocket委托
            </summary>
        </member>
        <member name="M:ES.Network.Websocket.IWebsocketInvoke.OnOpen(ES.Network.Websocket.RemoteConnection)">
            <summary>
            连接打开回调
            </summary>
            <param name="conn">连接对象</param>
        </member>
        <member name="M:ES.Network.Websocket.IWebsocketInvoke.OnClose(ES.Network.Websocket.RemoteConnection)">
            <summary>
            连接关闭回调
            </summary>
            <param name="conn">连接对象</param>
        </member>
        <member name="M:ES.Network.Websocket.IWebsocketInvoke.OnMessage(ES.Network.Websocket.RemoteConnection)">
            <summary>
            收到消息回调
            </summary>
            <param name="conn">连接对象</param>
        </member>
        <member name="M:ES.Network.Websocket.IWebsocketInvoke.OnBinary(ES.Network.Websocket.RemoteConnection)">
            <summary>
            收到消息回调
            </summary>
            <param name="conn">连接对象</param>
        </member>
        <member name="M:ES.Network.Websocket.IWebsocketInvoke.OnError(ES.Network.Websocket.RemoteConnection,System.Exception)">
            <summary>
            连接发生错误
            </summary>
            <param name="conn"></param>
            <param name="exception"></param>
        </member>
        <member name="T:ES.Network.Websocket.RemoteConnection">
            <summary>
            远程连接对象
            </summary>
        </member>
        <member name="F:ES.Network.Websocket.RemoteConnection.socket">
            <summary>
            连接对象
            </summary>
        </member>
        <member name="F:ES.Network.Websocket.RemoteConnection.tag">
            <summary>
            用户自定义标识 绑定对象
            </summary>
        </member>
        <member name="F:ES.Network.Websocket.RemoteConnection.message">
            <summary>
            字符消息
            </summary>
        </member>
        <member name="F:ES.Network.Websocket.RemoteConnection.buffer">
            <summary>
            字节消息
            </summary>
        </member>
        <member name="P:ES.Network.Websocket.RemoteConnection.IsAvailable">
            <summary>
            连接对象是否有效
            </summary>
        </member>
        <member name="M:ES.Network.Websocket.RemoteConnection.Send(System.String)">
            <summary>
            发送消息
            </summary>
            <param name="message">字符消息</param>
        </member>
        <member name="M:ES.Network.Websocket.RemoteConnection.Send(System.Byte[])">
            <summary>
            发送消息
            </summary>
            <param name="message">字节消息</param>
        </member>
        <member name="M:ES.Network.Websocket.RemoteConnection.GetSocketGuid">
            <summary>
            获取唯一标识ID 同一个socket连接id不变
            </summary>
            <returns></returns>
        </member>
        <member name="T:ES.Network.Websocket.WebsocketService">
            <summary>
            esf websocket服务器模块
            <para>模块是对第三方框架Fleck二次封装完成</para>
            <para>Fleck地址:https://github.com/statianzo/Fleck</para>
            </summary>
        </member>
        <member name="F:ES.Network.Websocket.WebsocketService.websocketSvr">
            <summary>
            Fleck websocket服务对象
            </summary>
        </member>
        <member name="M:ES.Network.Websocket.WebsocketService.#ctor(System.String,ES.Network.Websocket.IWebsocketInvoke)">
            <summary>
            创建服务
            </summary>
            <param name="url">监听地址</param>
            <param name="invoke">监听委托</param>
        </member>
        <member name="M:ES.Network.Websocket.WebsocketService.#ctor(System.String,System.String,ES.Network.Websocket.IWebsocketInvoke)">
            <summary>
            创建ssl服务
            </summary>
            <param name="url">监听地址</param>
            <param name="certificateFile">ssl证书路径</param>
            <param name="invoke">监听委托</param>
        </member>
        <member name="M:ES.Network.Websocket.WebsocketService.InitInvoke(ES.Network.Websocket.IWebsocketInvoke)">
            <summary>
            初始化委托
            </summary>
            <param name="invoke"></param>
        </member>
        <member name="M:ES.Network.Websocket.WebsocketService.CloseWebSocketSvrService">
            <summary>
            关闭websocket
            </summary>
        </member>
    </members>
</doc>
